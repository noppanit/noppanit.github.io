<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Blog]]></title>
  <link href="https://www.noppanit.com/atom.xml" rel="self"/>
  <link href="https://www.noppanit.com/"/>
  <updated>2016-11-12T14:05:01-05:00</updated>
  <id>https://www.noppanit.com/</id>
  <author>
    <name><![CDATA[Noppanit Charassinvichai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Game of life for dummies]]></title>
    <link href="https://www.noppanit.com/game-of-life-for-dummies/"/>
    <updated>2016-11-11T23:10:25-05:00</updated>
    <id>https://www.noppanit.com/game-of-life-for-dummies</id>
    <content type="html"><![CDATA[<h2 id="game-of-life">Game of life</h2>

<p>It’s a <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">game</a> invented by the British mathematician John Horton Conway and the game goes like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
</span><span class="line">
</span><span class="line">Any live cell with fewer than two live neighbors dies, as if caused by under-population.
</span><span class="line">Any live cell with two or three live neighbors lives on to the next generation.
</span><span class="line">Any live cell with more than three live neighbors dies, as if by over-population..
</span><span class="line">Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Most people know this game because you might be asked during any technical interview to design Game of Life on a whiteboard. But for me, when I first learn how to program I was asked to code Game of Life and it was actually kinda fun. Especially, if you do it in TDD.</p>

<h2 id="why-this-post-then">Why this post then?</h2>
<p>I know there’s a lot of posts out there solving Game of Life in any possible known computer languages, but I feel like all of them are too hard to understand or use advanced library like <code>numpy</code> to solve the problem which makes it really hard to understand for me. Also, if I would like to understand how to solve the problem and if I can’t explain this simply that means I don’t understand at all.</p>

<h2 id="algorithm">Algorithm</h2>
<p>The simplest algorithm goes like this.</p>

<ol>
  <li>Count all the live cells around 8x8 matrix of a cell.</li>
  <li>Determine if the next state, the cell lives or dies based on the rules.</li>
</ol>

<p>So, if you can count all the live cells around a cell, you’re pretty much there.</p>

<h2 id="naive-approach">Naive approach</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">gameOfLife</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        :type board: List[List[int]]</span>
</span><span class="line"><span class="sd">        :rtype: void Do not return anything, modify board in-place instead.</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class="line">        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">        <span class="n">temp_board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">count_cell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class="line">          <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">          :type i: Column row</span>
</span><span class="line"><span class="sd">          :type j: Column column</span>
</span><span class="line"><span class="sd">          Count all the cells around the cell[i][j]</span>
</span><span class="line"><span class="sd">          &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">          <span class="n">list_of_tuples</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class="line">              <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
</span><span class="line">              <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">          <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">          <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">list_of_tuples</span><span class="p">:</span>
</span><span class="line">            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">l</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class="line">              <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">i</span> <span class="ow">or</span> <span class="n">y</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">j</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">                  <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">          <span class="k">return</span> <span class="n">count</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">          <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">            <span class="n">count</span> <span class="o">=</span> <span class="n">count_cell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">            <span class="n">temp_board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">          <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">            <span class="n">cell</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="n">count</span> <span class="o">=</span> <span class="n">temp_board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">              <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">              <span class="k">elif</span> <span class="n">count</span> <span class="ow">is</span> <span class="mi">3</span> <span class="ow">or</span> <span class="n">count</span> <span class="ow">is</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">              <span class="k">elif</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">              <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">Solution</span><span class="p">()</span><span class="o">.</span><span class="n">gameOfLife</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The naive approach is really simple and stupid. There’s a method to count all the cells and put that to a temp board so it can be used to determined the next cycle of the game.</p>

<p>The complexity would be <code>O(m * n)</code> but the space would be <code>O(m * n)</code> as well</p>

<h2 id="first-refactor">First refactor</h2>
<p>The first refactoring would be to just loop through the surrounding cell with the check for boundaries.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">gameOfLife</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        :type board: List[List[int]]</span>
</span><span class="line"><span class="sd">        :rtype: void Do not return anything, modify board in-place instead.</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class="line">        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">        <span class="n">temp_board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">count_cell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class="line">          <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">          :type i: Column row</span>
</span><span class="line"><span class="sd">          :type j: Column column</span>
</span><span class="line"><span class="sd">          Count all the cells around the cell[i][j]</span>
</span><span class="line"><span class="sd">          &quot;&quot;&quot;</span>
</span><span class="line">          <span class="n">lives</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">          <span class="k">for</span> <span class="n">I</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">m</span><span class="p">)):</span>
</span><span class="line">            <span class="k">for</span> <span class="n">J</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">min</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">)):</span>
</span><span class="line">              <span class="k">if</span> <span class="n">I</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">i</span> <span class="ow">or</span> <span class="n">J</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">j</span><span class="p">:</span>
</span><span class="line">                <span class="n">lives</span> <span class="o">+=</span> <span class="n">board</span><span class="p">[</span><span class="n">I</span><span class="p">][</span><span class="n">J</span><span class="p">]</span>
</span><span class="line">          <span class="k">return</span> <span class="n">lives</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">          <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">            <span class="n">count</span> <span class="o">=</span> <span class="n">count_cell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">            <span class="n">temp_board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">          <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">            <span class="n">cell</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="n">count</span> <span class="o">=</span> <span class="n">temp_board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">              <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">              <span class="k">elif</span> <span class="n">count</span> <span class="ow">is</span> <span class="mi">3</span> <span class="ow">or</span> <span class="n">count</span> <span class="ow">is</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">              <span class="k">elif</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">              <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">Solution</span><span class="p">()</span><span class="o">.</span><span class="n">gameOfLife</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s a bit better don’t you think?</p>

<h2 id="second-refactor">Second refactor</h2>

<p>Now the first two approaches, we have to have a temp board to calculate the next state. Let’s see if we can do better than that by manipulating the board in-place instead of having a temp board.</p>

<p>Someone on the <a href="https://discuss.leetcode.com/topic/29054/easiest-java-solution-with-explanation">leetcode discussion</a> suggested bit manipulation to store the state of the cell which I think it’s a brilliant idea. However, I feel like there’s not much explanation so I’m going to try to explain it here.</p>

<p>The problem with the second approach is that we have to have a <code>temp</code> board to store the number of surrounding cells so that we can flip it after the whole board has been counted. The problem with this approach is space complexity if the board is really large we need to double the size of memory to store the state of the board.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">  <span class="mi">2</span><span class="n">nd</span>   <span class="mi">1</span><span class="n">st</span>
</span><span class="line"><span class="mi">0</span> <span class="mi">0</span> <span class="p">(</span><span class="n">dead</span><span class="p">,</span> <span class="n">dead</span><span class="p">)</span>
</span><span class="line"><span class="mi">0</span> <span class="mi">1</span> <span class="p">(</span><span class="n">dead</span><span class="p">,</span> <span class="n">live</span><span class="p">)</span>
</span><span class="line"><span class="mi">1</span> <span class="mi">0</span> <span class="p">(</span><span class="n">live</span><span class="p">,</span> <span class="n">dead</span><span class="p">)</span>
</span><span class="line"><span class="mi">1</span> <span class="mi">1</span> <span class="p">(</span><span class="n">live</span><span class="p">,</span> <span class="n">live</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We have this board</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If we look at the coordinate <code>(1,1)</code> the cell is live and only has <code>1</code> surrounding living cell which according to the rule the cell dies because of under-population in the next state. So we can represent that cell as <code>0 1</code>. The right-most bit represent the first state and the left-most bit represent the next state. So in the case, the cell has value <code>1</code> which after we shift it to the right with <code>cell[i][j] &gt;&gt;= 1</code>. It’s going to be <code>0</code> which means the cell dies in the next state.</p>

<p>So to refactor the code we will get something like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">This is because we only care about live cell that&#39;s going to live on to the next state</span>
</span><span class="line"><span class="sd">And the dead cell that&#39;s going to come alive</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># If the cell is live and the surrounding cells count is either two or three, the cell lives on to the next state</span>
</span><span class="line"><span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">    <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="c"># If the cell is dead and the surrounding cells count is exactly three, the cell lives on to the next state</span>
</span><span class="line"><span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">    <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="c"># Then we flip to the next state</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To sum up we will get the code which looks something like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class="line"><span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">temp_board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">count_cell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="n">lives</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">I</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">m</span><span class="p">)):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">J</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">min</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">)):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">I</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">i</span> <span class="ow">or</span> <span class="n">J</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">j</span><span class="p">:</span>
</span><span class="line">                <span class="n">lives</span> <span class="o">+=</span> <span class="n">board</span><span class="p">[</span><span class="n">I</span><span class="p">][</span><span class="n">J</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lives</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="n">count</span> <span class="o">=</span> <span class="n">count_cell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">    <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class="line">        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might notice about this line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">lives</span> <span class="o">+=</span> <span class="n">board</span><span class="p">[</span><span class="n">I</span><span class="p">][</span><span class="n">J</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is because we want to just loop through the board once and if we change the number of the current cell to be ready for the next state, the later cell will get the wrong count. To <code>&amp; 1</code> means we just want to get the current state of the cell whether it’s dead or alive regardless of the total count of the surrounding cells.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is going on under your JavaScript code]]></title>
    <link href="https://www.noppanit.com/what-is-going-on-under-your-javascript-code/"/>
    <updated>2016-10-04T01:41:25-04:00</updated>
    <id>https://www.noppanit.com/what-is-going-on-under-your-javascript-code</id>
    <content type="html"><![CDATA[<p><strong>Disclaimer</strong></p>

<p>I’m no expert in this field nor having a PhD in Compiler. This is just my pure curiosity and I hope to share of what I’ve discovered so people can continue their curiosity.</p>

<h2 id="why-im-interested-in-this">Why I’m interested in this.</h2>
<p>I was asked once during my technical interview, “What happen when you execute fs.readFileSync(‘’)”. What he meant was that how JavaScript code interacts with the machine under the hood. At the time, I thought I just wrote that code and there you go I got the content of the file.</p>

<p>I couldn’t answer and I didn’t get the job. I just recently became a JavaScript developer because of my interest in front-end and back-end in the same time. Knowing JavaScript allows me to get the best of both worlds. However, the only thing I know about JavaScript is that it’s something to do with V8 and I had no idea what’s going on under the hood. So, I took the time to really understand how JavaScript works and the history behind it. So, I started with the task a computer does best; executing commands or how does a computer execute a command.</p>

<h2 id="how-does-computer-works">How does computer works?</h2>
<p>One of the best movies for me is “The Core” where “Rat” had to hack the Internet to control the flow of information. The hacker claims that he only knew one language, “zeros and ones”. At the time, I understood that it’s something to do with binary number, and I thought that it’s just hollywood talk and these people didn’t know what they were talking. I have to write <code>print('Hello');</code> to print <code>Hello</code> on my console, it has nothing to do with zeros or ones.</p>

<p>So, I started digging and I found <a href="https://m.reddit.com/r/learnprogramming/comments/1pv40y/for_those_of_you_wondering_how_code_becomes_ones/">this</a>.</p>

<p>Basically, when we execute a piece of code, the compiler compiles the code to a set of instructions which is Assembly. Then, we have an <a href="https://en.wikipedia.org/wiki/Assembly_language#Assembler">assembler</a> to translate the instructions to their numerical equivalents. For example,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ADD esp, 8
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>is translated in x86 architecture like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Raw Hex <span class="o">(</span>zero bytes in bold<span class="o">)</span>:
</span><span class="line">
</span><span class="line">83C408
</span><span class="line">
</span><span class="line">String Literal:
</span><span class="line">
</span><span class="line"><span class="s2">&quot;\x83\xC4\x08&quot;</span>
</span><span class="line">
</span><span class="line">Array Literal:
</span><span class="line">
</span><span class="line"><span class="o">{</span> 0x83, 0xC4, 0x08 <span class="o">}</span>
</span><span class="line">
</span><span class="line">Disassembly:
</span><span class="line">0:  <span class="m">83</span> c4 <span class="m">08</span>                add    esp,0x8
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice the HEX code <code>83C408</code> which you can translate to binary number later for the computer to understand.</p>

<p>You can use this <a href="https://defuse.ca/online-x86-assembler.htm">online assembler</a> to play with it.</p>

<h2 id="how-does-javascript-engine-v8-work">How does JavaScript engine (v8) work?</h2>
<p>In a nutshell, V8 <a href="http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/">translates JavaScript</a>
code to machine code with <em>JIT (Just-In-Time) compiler</em>.</p>

<p>There are <a href="http://www.mattzeunert.com/2015/08/19/viewing-assembly-code-generated-by-v8.html">four main stages</a> of how the code passes through V8.</p>

<ol>
  <li>
    <p>JavaScript - Your code</p>
  </li>
  <li>
    <p>Hydrogen - Intermediate code</p>
  </li>
  <li>
    <p>Lithium - Machine specific code</p>
  </li>
  <li>
    <p>Machine Code - This is what your computer understand.</p>
  </li>
</ol>

<p>In this post we’re going to see the assembly code which is the machine specific code.</p>

<h2 id="show-me-the-code">Show me the code</h2>
<p>Enough talking. Now show me the code you say. Let’s say you have a simple function to add two numbers together like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To view the machine code in Assembly you need to install V8. First you need to install <a href="https://www.chromium.org/developers/how-tos/install-depot-tools">depot-tools</a>. Once you install <code>depot-tools</code> you can run
Follow this <a href="https://github.com/v8/v8/wiki/Using%20Git">instruction</a>.</p>

<p><em>Note</em>: The documentation of how to install V8 is subject to change. So, please refer to <a href="https://github.com/v8/v8/wiki/Building%20with%20GN">link</a>.</p>

<p>In order to get <code>V8</code> you need to run. You will also need <code>Python 2</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">fetch v8
</span><span class="line"><span class="nb">cd </span>v8
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The script will take sometime to finish. It will fetch V8 source code. Then you need to build all the dependencies by running.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gclient sync
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you need to install D8. The next step is going to take a long time. So, get yourself a nice cup of coffee.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">make x64.release <span class="nv">objectprint</span><span class="o">=</span>on <span class="nv">disassembler</span><span class="o">=</span>on
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once everything is in place, you’re ready to see how your code is communicating with your CPU.</p>

<p>You can do this to get the assembly code</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>out/x64.release
</span><span class="line">./d8 --print-code ~/Downloads/add.js
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is what you’re likely going to see.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="err">---</span> <span class="nf">Raw</span> <span class="nv">source</span> <span class="o">---</span>
</span><span class="line"><span class="nf">function</span> <span class="nv">add</span><span class="p">(</span><span class="nv">a</span><span class="p">,</span><span class="nv">b</span><span class="p">)</span> <span class="err">{</span>
</span><span class="line">  <span class="nf">return</span> <span class="nv">a</span><span class="o">+</span><span class="nv">b</span><span class="c1">;</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="err">---</span> <span class="nf">Code</span> <span class="o">---</span>
</span><span class="line"><span class="nf">source_position</span> <span class="err">=</span> <span class="mi">0</span>
</span><span class="line"><span class="nf">kind</span> <span class="err">=</span> <span class="nv">FUNCTION</span>
</span><span class="line"><span class="nf">compiler</span> <span class="err">=</span> <span class="nv">full</span><span class="o">-</span><span class="nv">codegen</span>
</span><span class="line"><span class="nf">Instructions</span> <span class="p">(</span><span class="nb">si</span><span class="nv">ze</span> <span class="err">=</span> <span class="mi">140</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043e0</span>     <span class="mi">0</span>  <span class="mi">55</span>             <span class="nv">push</span> <span class="nb">rbp</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043e1</span>     <span class="mi">1</span>  <span class="mi">4889</span><span class="nv">e5</span>         <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rbp</span><span class="p">,</span><span class="nb">rsp</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043e4</span>     <span class="mi">4</span>  <span class="mi">56</span>             <span class="nv">push</span> <span class="nb">rsi</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043e5</span>     <span class="mi">5</span>  <span class="mi">57</span>             <span class="nv">push</span> <span class="nb">rdi</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043e6</span>     <span class="mi">6</span>  <span class="mi">488</span><span class="nv">b4f2f</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rcx</span><span class="p">,[</span><span class="nb">rdi</span><span class="o">+</span><span class="mh">0x2f</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043ea</span>    <span class="mi">10</span>  <span class="mi">488</span><span class="nv">b490f</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rcx</span><span class="p">,[</span><span class="nb">rcx</span><span class="o">+</span><span class="mh">0xf</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043ee</span>    <span class="mi">14</span>  <span class="mi">83411</span><span class="nv">b01</span>       <span class="nv">addl</span> <span class="p">[</span><span class="nb">rcx</span><span class="o">+</span><span class="mh">0x1b</span><span class="p">],</span><span class="mh">0x1</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043f2</span>    <span class="mi">18</span>  <span class="mi">49</span><span class="nv">ba81bb8a39e52a0000</span> <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nv">r10</span><span class="p">,</span><span class="mh">0x2ae5398abb81</span>    <span class="c1">;; object: 0x2ae5398abb81 &lt;FixedArray[2]&gt;</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043fc</span>    <span class="mi">28</span>  <span class="mi">4152</span>           <span class="nv">push</span> <span class="nv">r10</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043fe</span>    <span class="mi">30</span>  <span class="mi">6</span><span class="nv">a00</span>           <span class="nv">push</span> <span class="mh">0x0</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804400</span>    <span class="mi">32</span>  <span class="mi">488</span><span class="nv">b45f0</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rax</span><span class="p">,[</span><span class="nb">rbp</span><span class="o">-</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804404</span>    <span class="mi">36</span>  <span class="mi">488</span><span class="nv">b402f</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rax</span><span class="p">,[</span><span class="nb">rax</span><span class="o">+</span><span class="mh">0x2f</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804408</span>    <span class="mi">40</span>  <span class="mi">488</span><span class="nv">b400f</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rax</span><span class="p">,[</span><span class="nb">rax</span><span class="o">+</span><span class="mh">0xf</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280440c</span>    <span class="mi">44</span>  <span class="mi">50</span>             <span class="nv">push</span> <span class="nb">rax</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280440d</span>    <span class="mi">45</span>  <span class="nv">b803000000</span>     <span class="nv">movl</span> <span class="nb">rax</span><span class="p">,</span><span class="mh">0x3</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804412</span>    <span class="mi">50</span>  <span class="mi">48</span><span class="nv">bb80753e1001000000</span> <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rbx</span><span class="p">,</span><span class="mh">0x1103e7580</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280441c</span>    <span class="mi">60</span>  <span class="nv">e81fffefff</span>     <span class="nv">call</span> <span class="mh">0x27f392704340</span>     <span class="c1">;; code: STUB, CEntryStub, minor: 8</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804421</span>    <span class="mi">65</span>  <span class="mi">493</span><span class="nv">ba5200c0000</span> <span class="nv">REX.W</span> <span class="nv">cmpq</span> <span class="nb">rsp</span><span class="p">,[</span><span class="nv">r13</span><span class="o">+</span><span class="mh">0xc20</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804428</span>    <span class="mi">72</span>  <span class="mi">7305</span>           <span class="nv">jnc</span> <span class="mi">79</span>  <span class="p">(</span><span class="mh">0x27f39280442f</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280442a</span>    <span class="mi">74</span>  <span class="nv">e811e6f4ff</span>     <span class="nv">call</span> <span class="nv">StackCheck</span>  <span class="p">(</span><span class="mh">0x27f392752a40</span><span class="p">)</span>    <span class="c1">;; code: BUILTIN</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280442f</span>    <span class="mi">79</span>  <span class="mi">498</span><span class="nv">b45a0</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rax</span><span class="p">,[</span><span class="nv">r13</span><span class="o">-</span><span class="mh">0x60</span><span class="p">]</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804433</span>    <span class="mi">83</span>  <span class="mi">48</span><span class="nv">bba9ba8a39e52a0000</span> <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rbx</span><span class="p">,</span><span class="mh">0x2ae5398abaa9</span>    <span class="c1">;; object: 0x2ae5398abaa9 Cell for 6144</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280443d</span>    <span class="mi">93</span>  <span class="mi">83430</span><span class="nv">bd1</span>       <span class="nv">addl</span> <span class="p">[</span><span class="nb">rbx</span><span class="o">+</span><span class="mh">0xb</span><span class="p">],</span><span class="mh">0xd1</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804441</span>    <span class="mi">97</span>  <span class="mi">791</span><span class="nv">f</span>           <span class="nv">jns</span> <span class="mi">130</span>  <span class="p">(</span><span class="mh">0x27f392804462</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804443</span>    <span class="mi">99</span>  <span class="mi">50</span>             <span class="nv">push</span> <span class="nb">rax</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804444</span>   <span class="mi">100</span>  <span class="nv">e877e5f4ff</span>     <span class="nv">call</span> <span class="nv">InterruptCheck</span>  <span class="p">(</span><span class="mh">0x27f3927529c0</span><span class="p">)</span>    <span class="c1">;; code: BUILTIN</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804449</span>   <span class="mi">105</span>  <span class="mi">58</span>             <span class="nv">pop</span> <span class="nb">rax</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280444a</span>   <span class="mi">106</span>  <span class="mi">48</span><span class="nv">bba9ba8a39e52a0000</span> <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nb">rbx</span><span class="p">,</span><span class="mh">0x2ae5398abaa9</span>    <span class="c1">;; object: 0x2ae5398abaa9 Cell for 6144</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804454</span>   <span class="mi">116</span>  <span class="mi">49</span><span class="nv">ba0000000000180000</span> <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="nv">r10</span><span class="p">,</span><span class="mh">0x180000000000</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280445e</span>   <span class="mi">126</span>  <span class="mi">4</span><span class="nv">c895307</span>       <span class="nv">REX.W</span> <span class="nv">movq</span> <span class="p">[</span><span class="nb">rbx</span><span class="o">+</span><span class="mh">0x7</span><span class="p">],</span><span class="nv">r10</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804462</span>   <span class="mi">130</span>  <span class="nv">c9</span>             <span class="nv">leavel</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804463</span>   <span class="mi">131</span>  <span class="nv">c20800</span>         <span class="nv">ret</span> <span class="mh">0x8</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804466</span>   <span class="mi">134</span>  <span class="mi">6690</span>           <span class="nv">nop</span>
</span><span class="line">
</span><span class="line"><span class="nf">Source</span> <span class="nv">positions</span><span class="p">:</span>
</span><span class="line"> <span class="nf">pc</span> <span class="nv">offset</span>  <span class="nv">position</span>
</span><span class="line">         <span class="err">0</span>         <span class="err">0</span>
</span><span class="line">       <span class="err">130</span>        <span class="err">35</span>  <span class="nf">statement</span>
</span><span class="line">
</span><span class="line"><span class="nf">Deoptimization</span> <span class="nv">Output</span> <span class="nv">Data</span> <span class="p">(</span><span class="nv">deopt</span> <span class="nv">points</span> <span class="err">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">Back</span> <span class="nv">edges</span> <span class="p">(</span><span class="nb">si</span><span class="nv">ze</span> <span class="err">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="nf">ast_id</span>  <span class="nv">pc_offset</span>  <span class="nv">loop_depth</span>
</span><span class="line">
</span><span class="line"><span class="err">0</span><span class="nl">x2ae5398abbb9:</span> <span class="err">[</span><span class="nf">TypeFeedbackInfo</span><span class="p">]</span>
</span><span class="line"> <span class="err">-</span> <span class="nl">ic_total_count:</span> <span class="err">0,</span> <span class="nl">ic_with_type_info_count:</span> <span class="err">0,</span> <span class="nl">ic_generic_count:</span> <span class="err">0</span>
</span><span class="line">
</span><span class="line"><span class="nf">RelocInfo</span> <span class="p">(</span><span class="nb">si</span><span class="nv">ze</span> <span class="err">=</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f3928043f4</span>  <span class="nv">embedded</span> <span class="nv">object</span>  <span class="p">(</span><span class="mh">0x2ae5398abb81</span> <span class="o">&lt;</span><span class="nv">FixedArray</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280441d</span>  <span class="nv">code</span> <span class="nv">target</span> <span class="p">(</span><span class="nv">STUB</span><span class="p">)</span>  <span class="p">(</span><span class="mh">0x27f392704340</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280442b</span>  <span class="nv">code</span> <span class="nv">target</span> <span class="p">(</span><span class="nv">BUILTIN</span><span class="p">)</span>  <span class="p">(</span><span class="mh">0x27f392752a40</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804435</span>  <span class="nv">embedded</span> <span class="nv">object</span>  <span class="p">(</span><span class="mh">0x2ae5398abaa9</span> <span class="nv">Cell</span> <span class="nv">for</span> <span class="mi">6144</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f392804445</span>  <span class="nv">code</span> <span class="nv">target</span> <span class="p">(</span><span class="nv">BUILTIN</span><span class="p">)</span>  <span class="p">(</span><span class="mh">0x27f3927529c0</span><span class="p">)</span>
</span><span class="line"><span class="err">0</span><span class="nf">x27f39280444c</span>  <span class="nv">embedded</span> <span class="nv">object</span>  <span class="p">(</span><span class="mh">0x2ae5398abaa9</span> <span class="nv">Cell</span> <span class="nv">for</span> <span class="mi">6144</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="err">---</span> <span class="nf">End</span> <span class="nv">code</span> <span class="o">---</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>~~Now, in theory you can grab the hex code and run that in C and you should be able to get the same result. I haven’t tried it please let me know if it works or not.~~ It wouldn’t work because the generated code has fixed memory address from when the program was executed.</p>

<p>What I learn from this post is how is my JavaScript code executed in my computer and the next time I got asked, I will be able to answer that interview question. Sometimes, it’s nicer to be asked a question like this than how to revert a binary tree on a whiteboard. Don’t you think?</p>

<p>More info</p>

<ol>
  <li>
    <p><a href="https://gist.github.com/kevincennis/0cd2138c78a07412ef21">V8 Cheatsheet</a></p>
  </li>
  <li>
    <p><a href="https://wingolog.org/archives/2011/06/08/what-does-v8-do-with-that-loop">What does V8 do with that loop</a></p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=yOyaJXpAYZQ">Comparing C to machine language (video)</a></p>
  </li>
  <li>
    <p><a href="https://wingolog.org/archives/2011/08/02/a-closer-look-at-crankshaft-v8s-optimizing-compiler">A closer look at crankshaft v8s optimizing compiler</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to change your habit one task at a time]]></title>
    <link href="https://www.noppanit.com/how-to-change-your-habit-one-task-at-a-time/"/>
    <updated>2016-03-02T08:49:31-05:00</updated>
    <id>https://www.noppanit.com/how-to-change-your-habit-one-task-at-a-time</id>
    <content type="html"><![CDATA[<h2 id="are-you-struggling-to-get-anything-done">Are you struggling to get anything done?</h2>
<p>Now we have this amazing tool that could change your life… I present to you <a href="https://habitica.com">Habitica</a>. If you click now you will get this tool for free. Does that sound like a Direct TV ad?.</p>

<p>I’d like to write down my experience of how I use Habitica to change my bad habit one task at a time. I was introduced to this tool when I was visiting my friend <a href="http://scottmuc.com/">Scott Muc</a> in Berlin. We were chatting about time management and productivity. He introduced me to <a href="https://www.coffitivity.com/">Cofitivity</a> as well, which is also another great tool to increase your productivity. I guess I don’t have to tell you about pomodoro. After 4 months later, I’ve changed some of my bad habits. One of which is making my bed. It might sounds easy but I make my own bed everyday and even while I’m travelling.</p>

<h2 id="how">How?</h2>
<p>Habitica is built around Gamification. If you don’t know what Gamification is, think about badges or number of likes or favourites. People love badges and people are crazy about likes.
I was once crazy about checking in all the time to earn different badged on Foursquare or give a really detailed reviews just to earn reputation. It is fun and addicting.</p>

<p>Also if you play video game, you must remember countless of hours you spent on killing monsters to earn XP or rare items. That’s the core idea of Habitica. It keeps your motivating and you won’t get bored easily. I say easily because eventually you will find Habitica too easy. They have a reset button where you can reset your character class or if you’re too overwhelmed by all the habits and dailies.</p>

<p>Habitica combines the fun of RPG (Role Playing Games) and Gamification. Instead of fighting monsters, you’re fighting with your own habits. After you get something done, you earn XP and gold so you can level up your character or buy cool weapons to show off with your friends.</p>

<h2 id="so-how-do-i-use-habitica">So how do I use Habitica.</h2>
<p>Personally, I don’t use Habitica for any of my work tasks. I use Wunderlist instead. If you’re like me my work tasks tend to be really long and sometime I lose track of what needs to be done if I enter every task to Habitica. 
I use Habitica for anything that I want to make myself doing it or I want to change my bad habit. For example, I have a negative task every time I eat something unhealthy, like cookies or sweet. Every time I eat a cookie I have to click that <code>-</code> button and I’d lose my health. Or I would create a task to check my plane ticket for my next vacation.</p>

<p>Another example of how I changed my habit is making my bed. I created a task to make my bed every morning. It might sound too simple but it really did change my habit. Now I make my bed everyday without even knowing it.
I wake up every morning, make my bed and click the checkbox. I earn XP and I feel good about it.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2016/03/make-bed.png" title="Habitica Habit" /></p>

<p>Another example would be that I could finish my Coursera course that I have always wanted to do for a long time. I used to sign up to all the classes on Coursera and I ended up not passing even the first week. Now I can force myself to finish the course week by week. If I don’t do it in time, my character dies, loses all the golds and one rare item.</p>

<p>Now if you have been playing for quite sometime, your tasks or habits can get really long which you have to scroll up and down. One thing I do is to group tasks together in checklist. For example, if I want to finish a book, I list out all the chapters then I check it off chapter by chapter. This helps you keep track of what else needs to be done.</p>

<p>You can also set the difficulty of the task. For example, making my bed is easy but learning a chapter on Coursera is hard. I would get more XP on my Coursera task.</p>

<p>Discipline is really important in Habitica. You can create as many tasks as you like and keep clicking it until you level up which no one will stop you. Eventually the game will be too easy and you will get bored and you won’t change anything. This also means that if you do negative tasks you have to click that <code>-</code> button. There’s no shame on binge eating on your cheat day. Habitica has reward system where you can create a reward for yourself which you have to use your golds.</p>

<h2 id="challenge-accepted">Challenge accepted!</h2>
<p>Habitica has a social aspect that can keep you motivated. You can form a party with your friend and fight the big boss or you can accept a challenge from the community to make your game harder and more engaging. For example, I recently signed up for a Spanish class and I joined the Spanish Duolingo challenge (Now I’m 50% done). Challenges have pre-populated tasks and dallies for you already. You just have to tick them off when you finished the task. If you’re discipline enough you might get diamonds from the owner of the challenge as a reward. This way, you will have other like-minded people to discuss or to encourage each other.</p>

<h2 id="its-open-source">It’s open source</h2>
<p>This is the best thing about Habitica. It’s open source. You can fork the repository on Github and create your own version or help the community to make the application better. It’s all open source including iOS and Android.</p>

<p>Let’s change your bad habit one task at a time! Come and say hi to me on Habitica or let me know how you use Habitica to change your habit.</p>

<p>All after I finished this post I get to tick it off my list!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gatling Cluster]]></title>
    <link href="https://www.noppanit.com/gatling-cluster/"/>
    <updated>2016-02-17T20:28:25-05:00</updated>
    <id>https://www.noppanit.com/gatling-cluster</id>
    <content type="html"><![CDATA[<h3 id="performance-matters">Performance matters</h3>
<p>I think we can all agree that performance is one of the most important things in any application. That’s why we have performance or load testing. There’s a lot of tools out there we can choose from. But for this tutorial I pick <a href="http://gatling.io/#/">Gatling</a>.</p>

<p>Now it’s easy to say I want to generate 1,000,000 requests and hit the machine as hard as possible. In reality, your machine won’t be able to do that due to OS or Network Card limitations. The most common thing is <code>ulimit</code></p>

<p>Gatling has a way to <a href="http://gatling.io/docs/1.5.6/user_documentation/cookbooks/scaling_out.html">scale out</a> the test scenario to different machines but there’s not enough documentation on the website.</p>

<p>Credit goes to <a href="http://www.nimrodstech.com/gatling-cluster-load-testing/">nimrodtech</a> for creating the script but I adapted a bit so if anybody wants to grab this please feel free.</p>

<p>My version assumes that you’re using EC2 instance and the directory structures are different between the host and local.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#Assuming same user name for all hosts
</span><span class="line">USER_NAME='ubuntu'
</span><span class="line">
</span><span class="line">#Remote hosts list
</span><span class="line">HOSTS=( IP_ADDRESSES )
</span><span class="line">PEM_FILE=~/.ssh/your_pem.pem
</span><span class="line">
</span><span class="line">#You should change all of this values to suit your structure
</span><span class="line">CURRENT_DIRECTORY=$(pwd)
</span><span class="line">GATLING_LOCAL_HOME=$CURRENT_DIRECTORY/performance/gatling
</span><span class="line">GATLING_REMOTE_HOME=/home/ubuntu/gatling
</span><span class="line">
</span><span class="line">GATLING_LOCAL_SIMULATIONS_DIR=$GATLING_LOCAL_HOME/user-files/simulations/
</span><span class="line">GATLING_REMOTE_SIMULATIONS_DIR=$GATLING_REMOTE_HOME/user-files/simulations/
</span><span class="line">
</span><span class="line">GATLING_LOCAL_RUNNER=$GATLING_LOCAL_HOME/bin/gatling.sh
</span><span class="line">GATLING_REMOTE_RUNNER=$GATLING_REMOTE_HOME/bin/gatling.sh
</span><span class="line">
</span><span class="line">#Change to your simulation class name
</span><span class="line">SIMULATION_NAME='YOUR_SIMULATION'
</span><span class="line">
</span><span class="line">#No need to change this
</span><span class="line">GATLING_LOCAL_REPORT_DIR=$GATLING_LOCAL_HOME/results/
</span><span class="line">GATLING_REMOTE_REPORT_DIR=$GATLING_REMOTE_HOME/results/
</span><span class="line">
</span><span class="line">GATHER_REPORTS_DIR=~/Downloads/reports/
</span><span class="line">
</span><span class="line">echo "Starting Gatling cluster run for simulation: $SIMULATION_NAME"
</span><span class="line">
</span><span class="line">echo "Cleaning previous runs from localhost"
</span><span class="line">rm -rf $GATLING_LOCAL_REPORT_DIR
</span><span class="line">mkdir $GATLING_LOCAL_REPORT_DIR
</span><span class="line">rm -rf $GATLING_LOCAL_REPORT_DIR
</span><span class="line">
</span><span class="line">rm -rf $GATHER_REPORTS_DIR
</span><span class="line">mkdir -p $GATHER_REPORTS_DIR
</span><span class="line">
</span><span class="line">for HOST in "${HOSTS[@]}"
</span><span class="line">do
</span><span class="line">  echo "Cleaning previous runs from host: $HOST"
</span><span class="line">  ssh -i $PEM_FILE -n -f $USER_NAME@$HOST "sh -c 'rm -rf $GATLING_REMOTE_REPORT_DIR'"
</span><span class="line">done
</span><span class="line">
</span><span class="line">for HOST in "${HOSTS[@]}"
</span><span class="line">do
</span><span class="line">  echo "Copying simulations to host: $HOST"
</span><span class="line">  scp -i $PEM_FILE -r $GATLING_LOCAL_SIMULATIONS_DIR/* $USER_NAME@$HOST:$GATLING_REMOTE_SIMULATIONS_DIR
</span><span class="line">done
</span><span class="line">
</span><span class="line">for HOST in "${HOSTS[@]}"
</span><span class="line">do
</span><span class="line">  echo "Running simulation on host: $HOST"
</span><span class="line">  ssh -i $PEM_FILE -n -f $USER_NAME@$HOST "sh -c 'nohup $GATLING_REMOTE_RUNNER -nr -s $SIMULATION_NAME &gt; $GATLING_REMOTE_HOME/run.log 2&gt;&amp;1 &amp;'"
</span><span class="line">done
</span><span class="line">
</span><span class="line">echo "Running simulation on localhost"
</span><span class="line">$GATLING_LOCAL_RUNNER -nr -s $SIMULATION_NAME
</span><span class="line">
</span><span class="line">echo "Gathering result file from localhost"
</span><span class="line">ls -t $GATLING_LOCAL_REPORT_DIR | head -n 1 | xargs -I {} mv ${GATLING_LOCAL_REPORT_DIR}{} ${GATLING_LOCAL_REPORT_DIR}report
</span><span class="line">cp ${GATLING_LOCAL_REPORT_DIR}report/simulation.log $GATHER_REPORTS_DIR
</span><span class="line">
</span><span class="line">
</span><span class="line">for HOST in "${HOSTS[@]}"
</span><span class="line">do
</span><span class="line">  echo "Gathering result file from host: $HOST"
</span><span class="line">  ssh -i $PEM_FILE -n -f $USER_NAME@$HOST "sh -c 'ls -t $GATLING_REMOTE_REPORT_DIR | head -n 1 | xargs -I {} mv ${GATLING_REMOTE_REPORT_DIR}{} ${GATLING_REMOTE_REPORT_DIR}report'"
</span><span class="line">  scp -i $PEM_FILE $USER_NAME@$HOST:${GATLING_REMOTE_REPORT_DIR}report/simulation.log ${GATHER_REPORTS_DIR}simulation-$HOST.log
</span><span class="line">done
</span><span class="line">
</span><span class="line">mv $GATHER_REPORTS_DIR $GATLING_LOCAL_REPORT_DIR
</span><span class="line">echo "Aggregating simulations"
</span><span class="line">$GATLING_LOCAL_RUNNER -ro reports
</span><span class="line">
</span><span class="line">#using macOSX
</span><span class="line">open ${GATLING_LOCAL_REPORT_DIR}reports/index.html</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Round to the left most digit]]></title>
    <link href="https://www.noppanit.com/round-to-the-left-most-digit/"/>
    <updated>2016-01-16T17:30:37-05:00</updated>
    <id>https://www.noppanit.com/round-to-the-left-most-digit</id>
    <content type="html"><![CDATA[<p>It’s probably unusual for me to write anything about Math. I hated math and I failed the subject all the time. But I got pretty excited when I knew this trick from my colleague. I also asked this question at <a href="http://math.stackexchange.com/questions/1604448/how-to-find-out-if-a-number-is-a-hundred-or-thousand/1604474#1604474">stackoverflow</a>.</p>

<h3 id="the-problem">The problem</h3>

<p>Let’s say you have a number <code>423</code> and you want to round the number to the nearest left-most digit which in this case it’s <code>4</code>. If you want to round to the left-most digit it’s going to be <code>400</code>.</p>

<h3 id="the-solution">The solution</h3>
<p>The solution is quiet simple. You just need to get the place value of the number, take the number in question divided by the place value and <code>floor</code> the number then multiply the result with the place value again. That’s it! Simple right?</p>

<p>So, the place value of <code>423</code> is <code>100</code>.</p>

<p>\begin{align}
\frac{423}{100}
\end{align}</p>

<p>which you will get <code>4.23</code>. The you <code>floor</code> the number</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">  <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mf">4.23</span><span class="p">);</span> <span class="c1">// 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And then you multiple <code>4</code> with <code>100</code> to get the rounded number.</p>

<p>\begin{align}
{400}\cdot{100} = {400}
\end{align}</p>

<p>The problem is how are we going to get the <code>place value</code> of the number?</p>

<p>You want <a href="https://en.wikipedia.org/wiki/Logarithm">logarithm</a>.</p>

<p>The idea of this is to reverse the operation of exponentiation. For example, the <code>log10</code> of <code>423</code> is <code>2.62634036738</code> then <code>10^2.62634036738</code> equals <code>423</code>. But you want the place value. You would need to round the <code>2.62634036738</code> which is going to be <code>2</code> then <code>10^2</code> is <code>100</code>. There! you get the place value of the <code>4</code>.</p>

<p>\begin{align}
d = \lfloor\frac{n}{10^{\lfloor\log_{10} n \rfloor}} \rfloor
\cdot
10^{\lfloor\log_{10} n\rfloor}
\end{align}</p>

<h3 id="show-me-the-code">Show me the code</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">n</span> <span class="o">=</span> <span class="mi">423</span>
</span><span class="line"><span class="nx">d</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log10</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">n</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">d</span><span class="p">))</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="c1">// 400</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016]]></title>
    <link href="https://www.noppanit.com/2016/"/>
    <updated>2016-01-01T11:29:38-05:00</updated>
    <id>https://www.noppanit.com/2016</id>
    <content type="html"><![CDATA[<h2 id="goals-for-2016">Goals for 2016</h2>

<p>I want to make this a habit for me that I want to make goals for every year and commit to them. So, here’s what I want to achieve in 2016.</p>

<h3 id="fitness-psychically-and-mentally">Fitness, psychically and mentally.</h3>

<p>I know everyone makes this a New Year resolution. But I really want to make this true this year. I’m not much overweight and I lift. I’m really into 5x5 program and I’ve just busted my plateau from last year. This year, I want to be more consistent. Another important thing is I’m going to run a marathon this year as I didn’t do it last year even if it’s just going to be me.</p>

<p>Progress
1. Squat 185lb
2. Oh Press 80lb
3. Deadlift 265lb
4. Barbell Row 170lb</p>

<p>I’d like to increase every move by at least 25lb by the end of this year.</p>

<p>The most important thing for me this year is my mental hygiene. When I was a monk, I used to meditate 30 minutes a day but once I got out of it I never did it. I’m going to make this my mission to meditate 10-15 minutes a day before going to bed. I added this as my daily habit on my habitica.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2016/01/habitica.png" /></p>

<p>This resolution kinda sums everything that I want 2016 to be. I just want to be a happy me. If something’s going to create more stress I’m just going to say no.</p>

<h3 id="reach-level-of-my-fluency-in-spanish">Reach level of my fluency in Spanish</h3>

<p>I’ve just started learning Spanish a couple months ago and I like the language. There’s levels of fluency but I want to be able to make at least basic conversation. I should be comfortable ordering meals in Spanish restaurants in New York city. I’m planning to travel in South America and I would like to be able to make conversation with local people. I don’t want to be able to read news or make business conversation.</p>

<h3 id="become-a-data-scientist">Become a Data Scientist</h3>

<p>It wouldn’t be complete without a technical goal. I’ve just changed my career as my interests in data grew. Now I’m a Data Engineer. My day to day job is to create and maintain data pipeline for an organization. I still build stuff but it’s just different product. I like my job now but I would like to get involved more in the science. I’m taking Statistics courses and learning some algorithms to analyse a large dataset. I don’t have a degree in maths so it’s going to be a challenge for me but hey challenge accepted.</p>

<h3 id="travel">Travel</h3>

<p>I know this is everyone’s resolution. I have been to a lot of countries when I was working with ThoughtWorks. I’d like to go to less countries but spend more time to learn the culture and talking to local people. I used to just go to different countries to hangout by the bar or restaurant but this year I’m going to make less trips but more meaningful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrospective 2015]]></title>
    <link href="https://www.noppanit.com/retrospective-2015/"/>
    <updated>2015-12-24T14:26:19-05:00</updated>
    <id>https://www.noppanit.com/retrospective-2015</id>
    <content type="html"><![CDATA[<h1 id="reflections-on-20152015">Reflections on <a href="https://www.noppanit.com/2015/">2015</a></h1>

<ul>
  <li>I gotta say that my big win for 2015 is I deleted most of my social media accounts even I didn’t plan on doing that at all. I deleted my FB account a couple times in the past. I ended up getting it back. I increase Signal to Noise ration a lot by just deleting that. I used to spend at least 1-2 hour(s) on Facebook browsing what my friends have been doing. Sometimes, I got depressed because it seemed like all the people on Facebook they are on expensive vacation trips.</li>
</ul>

<p>At first, I was worried because I wouldn’t be able to get in touch with some of my friends and family. But I still talk to my family. We have LINE Messanger which we share pictures and videos. And all of friends that want to contact me, they always find a way to contact me if they want to contact me. I didn’t feel left out at all.</p>

<p>One of the main reasons that I don’t seem to like Facebook as it’s been abused a lot. My mum is the best example, she reacts aggresively and unnecessary to political opinions.</p>

<ul>
  <li>
    <p>I didn’t have any excuse for not running the Chicago Marathon but myself to blame. I didn’t train hard enough. I deferred it until 2016 and that would be my 2016 Resolutions.</p>
  </li>
  <li>
    <p>I did learn Spanish. I signed up for the beginner class and now I’m on the second level. Yo hablo poco Espanol!</p>
  </li>
  <li>
    <p>I didn’t learn to invest at all. But my knowledge on how to survive in the US has improved a lot (After spending almost $500 on my medical bill).</p>
  </li>
  <li>
    <p>I went to Peru and it was awesome! I highly recommened anyone to do it.</p>
  </li>
</ul>

<h1 id="summary">Summary</h1>

<h2 id="move-to-the-us">Move to the US</h2>
<p>I moved to the US a year ago. I didn’t regret the decision at all. I joined Fusion Media Network in 2015 as a Developer. However, as my curiosity in Data Science grows. I decided to join Condé Nast as a Data Engineer to quench my curiosity. It feels weird for the first month not building a website or web service. But I got to learn a whole new side of Engineering.</p>

<h2 id="kollaboration">Kollaboration</h2>
<p>I joined <a href="http://www.kollab.nyc/">Kollaboration</a> as a Technical Director to help out my friend. Unfortunetely, I failed on Time management and I didn’t have enough time to contribute. I’ll devote 2016 to improve my Time management skill.</p>

<h2 id="germany">Germany</h2>
<p>I met with a bunch of ex-Thoughtworker friends in Germany and I had a blast. I realised how much I love spending time in Germany. I love Berlin and I love the culture over there. People are nice and the coffee is the best I’ve had anywhere. I also received the saddest news whilst I was in Germany.</p>

<h2 id="thailand">Thailand</h2>
<p>I spoke in <a href="http://www.agiletourbkk.org/">Agile Tour Bangkok 2015</a>. My talk wasn’t that popular because I was up against with some big names but I did send my message to the audience and I got some positive feedback.</p>

<h2 id="habit">Habit</h2>
<p>I found the <a href="https://habitica.com">task management</a> board that works for me. I didn’t say it’s the best because certainly it lacks a lot of features but it works for me. Will have to come up with another post for this one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cosine Similarity for Dummies]]></title>
    <link href="https://www.noppanit.com/cosine-similarity-for-dummies/"/>
    <updated>2015-10-29T21:35:17-04:00</updated>
    <id>https://www.noppanit.com/cosine-similarity-for-dummies</id>
    <content type="html"><![CDATA[<p>Have you ever wonder how recommender system works? Or How Spotify or Amazon recommends what songs you might like or what product you might like to buy. I do. In this post, I’m going to try to explain how the recommendation algorithm works. First, let’s create a perfect scenario. I like to create an ideal example, it’s easier to understand.</p>

<p>Let’s say you have a very simple data of movies that users like collected from your site and you would like to match those people together based on their interests. How would you do that? One of the most popular methods is <a href="https://en.wikipedia.org/wiki/Cosine_similarity">Cosine Similarity</a>. When I first saw the name I was so confused; why Cosine? I remember when I was a kid I remembered my teacher told me about trigonometry so why does it have to do with that?</p>

<p>Here’s the sample data.</p>

<p>User 1 likes these movies</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">['Superman', 'Walking Dead', 'CSI']</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>User 2 likes these movies</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">['Superman', 'Walking Dead', 'CSI']</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Even without any algorithm we can say that two users like the same movies. But we want the algorithm to tell us that the two users are very similar. Before we get into the mathematical formula world. We have to understand what a vector is?</p>

<h1 id="whats-a-vector">What’s a vector?</h1>
<p>In Pyhsics, a vector has two things; magnitude and direction which can be written as</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/11/vector.png" title="Vector" /></p>

<p>I’d like to explain what a vector is but this <a href="http://immersivemath.com/ila/ch02_vectors/ch02.html">site</a> explains a lot better.</p>

<p>However, in Computer Science, 1-dimentional array is called a <a href="http://www.cplusplus.com/reference/vector/vector/">vector</a>. But <code>list</code> in Python cannot perform vector operation so we have to use <code>numpy</code> or you have to build your own which I don’t recommend.</p>

<p>Now we know what a vector is but how does it relate to Cosine Similarity. In a nutshell, Cosine Similarity is <a href="http://blog.christianperone.com/2013/09/machine-learning-cosine-similarity-for-vector-space-models-part-iii/">a measure that calculates the cosine of the angle between them</a>.</p>

<h1 id="cosine-similarity">Cosine Similarity</h1>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/11/cosine_similarity.gif" title="Cosine Similarity" /></p>

<p>In order to find the angle between the two vectors, we need to find the dot product of the two vectors as the formula below.</p>

<p>\begin{align}
\text{cosine-similarity}(A,B) = \frac{\left&lt;A,B\right&gt;}{||A||\cdot||B||}
\end{align}</p>

<h1 id="show-me-the-code">Show me the code</h1>

<p>Ok. enough about explanation, show me the code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">cosin_sim</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">w</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c"># 1 if movie is in the list of movies and 0 is not. </span>
</span><span class="line"><span class="n">cosin_sim</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</span><span class="line"><span class="c"># 1.0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the perfect example, we can see that the two users have the same interests.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python's Monkey patch for Dummies]]></title>
    <link href="https://www.noppanit.com/pythons-monkey-patch/"/>
    <updated>2015-10-25T19:00:27-04:00</updated>
    <id>https://www.noppanit.com/pythons-monkey-patch</id>
    <content type="html"><![CDATA[<p>Alright, I’m going to cut to the chase here. I’m having problems with Monkey patching in Python and I want to make it clear for myself and anybody who might stumble upon my post in the future. So, what’s the big deal here?</p>

<p>Let’s say you have a model</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>models/person.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">get_name</span><span class="p">():</span>
</span><span class="line">	<span class="o">//</span> <span class="n">Doing</span> <span class="n">some</span> <span class="n">database</span> <span class="n">lookup</span>
</span><span class="line">	<span class="o">//</span> <span class="n">But</span> <span class="n">I</span><span class="s">&#39;m going to return a hard-coded name for now</span>
</span><span class="line">	<span class="k">return</span> <span class="s">&#39;John Doe&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And you have a Phonebook class that’s trying to access the database</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>models/phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">models.person</span> <span class="kn">import</span> <span class="n">get_name</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Phonebook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">get_name</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, we know that <code>get_name</code> is accessing some database and we don’t want that to happen in unit test. We would like to stub that.</p>

<p>Coming from Java, I’d write my test like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>tests/test_phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span><span class="p">,</span> <span class="n">mock</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">models.phonebook</span> <span class="kn">import</span> <span class="n">Phonebook</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PhonebookTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;models.person.get_name&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">test_main</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_person</span><span class="p">):</span>
</span><span class="line">        <span class="n">mock_person</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">&#39;Another Name&#39;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="s">&#39;Another Name&#39;</span><span class="p">,</span> <span class="n">Phonebook</span><span class="p">()</span><span class="o">.</span><span class="n">lookup</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It makes sense right? I want to stub something from <code>models.person.get_name</code> so I’m telling <code>mock</code> to stub that class but my test failed miserably.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tests/test_phonebook.py F
</span><span class="line">
</span><span class="line">=================================================================================== FAILURES ===================================================================================
</span><span class="line">_________________________________________________________________________ PhonebookTestCase.test_main __________________________________________________________________________
</span><span class="line">
</span><span class="line">self = &lt;tests.test_phonebook.PhonebookTestCase testMethod=test_main&gt;, mock_person = &lt;MagicMock name='get_name' id='4460968592'&gt;
</span><span class="line">
</span><span class="line">    @mock.patch('models.person.get_name')
</span><span class="line">    def test_main(self, mock_person):
</span><span class="line">        mock_person.return_value = 'Another Name'
</span><span class="line">&gt;       self.assertEqual('Another Name', Phonebook().lookup())
</span><span class="line">E       AssertionError: 'Another Name' != 'John Doe'
</span><span class="line">E       - Another Name
</span><span class="line">E       + Noppanit
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why? Because <code>patch</code> behaves differently than what we expected. This is explained in <a href="http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch">Where to patch</a>. I’m going to summarize for you. Basically, <code>patch</code> is going to take effect from where it is looked up… For me after reading that I’m still confused. I might be the only one who’s confused here so I’m going to continue writing.</p>

<p>If we take a closer look how <a href="http://effbot.org/zone/import-confusion.htm">import</a> behaves in Python, it would be clearer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>models/phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">models.person</span> <span class="kn">import</span> <span class="n">get_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The line says please import <code>get_name</code> to the namespace in <code>models/phonebook.py</code>. So, when we want to use it we can just called <code>get_name()</code> without having to write <code>models.person.get_name()</code> Now if you change your code to be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>models/phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">models.person</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Phonebook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">models</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">get_name</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You test would pass. Because now our Phonebook is looking up <code>models.person.get_name</code> namespace instead of having function <code>get_name</code> being imported to its namespace.</p>

<p>Now if you want the old test to work, your <code>patch</code> has to be changed to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>tests/test_phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span><span class="p">,</span> <span class="n">mock</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">models.phonebook</span> <span class="kn">import</span> <span class="n">Phonebook</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PhonebookTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;models.phonebook.get_name&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">test_main</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_person</span><span class="p">):</span>
</span><span class="line">        <span class="n">mock_person</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">&#39;Another Name&#39;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="s">&#39;Another Name&#39;</span><span class="p">,</span> <span class="n">Phonebook</span><span class="p">()</span><span class="o">.</span><span class="n">lookup</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it for now. If you’re wondering why this is the case then looking at the source code of patch would help a lot. It’s using <a href="https://docs.python.org/3.5/library/functions.html#__import__"><code>__import__</code></a> function.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should or should not SSL your blog]]></title>
    <link href="https://www.noppanit.com/why-you-should-or-should-not-ssl-your-blog/"/>
    <updated>2015-10-09T17:02:25-04:00</updated>
    <id>https://www.noppanit.com/why-you-should-or-should-not-ssl-your-blog</id>
    <content type="html"><![CDATA[<p>After I switched to Octopress, I knew that I wanted to write about performance and SSL. Those are the main reasons why I switched.</p>

<p>Last year, Google <a href="http://googlewebmastercentral.blogspot.com/2014/08/https-as-ranking-signal.html">announced</a> that they will include Https as a single in their ranking. So, if you want to be the cool kid, go and SSL your site now. But what does SSL really do to your site? Have you seen that in action? I only know that from reading all the blog posts about this. In this blog, I’ll show you what SSL does to your site.</p>

<p>Thanks to my friend <a href="https://twitter.com/suksant">Suksant</a> who helped me conducting the test.</p>

<h2 id="what-will-you-need">What will you need?</h2>

<ol>
  <li><a href="https://www.wireshark.org/">Wireshare</a> is a network protocal analysis.</li>
</ol>

<h2 id="simple-website">Simple website.</h2>

<p>I’ve created a simple <a href="https://github.com/noppanit/SSL-Show-and-tell">site</a> that you can fake login form. So, you can go ahead and deploy that to your heroku. I chose Heroku as the platform of choice because you can try the site with and without SSL.</p>

<h2 id="setup-your-wireshark">Setup your wireshark</h2>

<p>There’s a couple things you need to do before you can capture the password.</p>

<ol>
  <li>Open your wireshark and go to <em>Capture -&gt; Interfaces</em> and click <em>en0</em> that should be your Wifi connection.</li>
</ol>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/wireshark-setup-interface.jpg" title="Wireshark Interfaces" /></p>

<p>Then click ‘Start’ to capture the packets</p>

<ol>
  <li>In the <em>Filter</em> section, put this <em>frame contains topsecret</em> (That’s going to be your password)</li>
</ol>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/wireshark-filter.jpg" title="Wireshark filter" /></p>

<h2 id="capture-the-password">Capture the password</h2>

<ol>
  <li>I deployed the application <a href="http://ssl-show-and-tell.herokuapp.com/login">here</a>. Go ahead and enter “username” in username and “topsecretpassword” in password It could be anything. Try to check if the URL is not SSL.</li>
</ol>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/form-to-submit-without-ssl.jpg" title="Form submit" /></p>

<ol>
  <li>Once you’ve submitted your password, you should see that Wireshark has captured something already.</li>
</ol>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/wireshark-captured-password.jpg" title="Wireshark with password" /></p>

<p>without even trying to do anything hard. You can clearly see the password.</p>

<h2 id="now-with-ssl">Now with SSL.</h2>

<ol>
  <li>Change your URL to be <em>https:</em></li>
  <li>You will not find anything with your password on Wireshark</li>
</ol>

<h2 id="what-gives">What gives?</h2>

<p>In conclusion, what have we learned here? SSL encrypts everything being sent to the server will be encrypted. It’s safer and make the site more trustworthy. However, if you’re just running a blog you probably won’t need SSL. If you have a website that capture anything from the user then big ‘YES’ you need SSL. For me, I just want to be a cool kid so I SSLed my site.</p>

<h2 id="reference">Reference</h2>
<ol>
  <li><a href="https://samsclass.info/120/proj/p3-wireshark.htm">Wireshark tutorial</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why algorithm matters?]]></title>
    <link href="https://www.noppanit.com/why-algorithm-matters/"/>
    <updated>2015-10-08T15:55:29-04:00</updated>
    <id>https://www.noppanit.com/why-algorithm-matters</id>
    <content type="html"><![CDATA[<p>If you have been to one of those technical interviews, you will like this.</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>&mdash; Max Howell (@mxcl) <a href="https://twitter.com/mxcl/status/608682016205344768">June 10, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I’m not going to rant about how broken the technical interviews are. There’s enough people who are more qualified to rant about this more than me.</p>

<p>So, why this matters? I just want to give a quick example of why algorithm matters. Please no haters! I know some of you might read this and will say “I do that all the time, what’s the big deal”. I’m still a bad developer and I’m still learning.</p>

<h2 id="scenario">Scenario</h2>

<p>You are a general, your home country is at war and you have to fight for your country. You are given a group of soldiers. You want to come up with a strategy to win the battle. Here’s the example of the soldiers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">[
</span><span class="line">    {
</span><span class="line">        "category": "machine-gun",
</span><span class="line">        "id": 0,
</span><span class="line">        "name": "D408CF"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">        "category": "machine-gun",
</span><span class="line">        "id": 1,
</span><span class="line">        "name": "C0BAD7"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">        "category": "rocket-man",
</span><span class="line">        "id": 2,
</span><span class="line">        "name": "04B5E4"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">        "category": "rocket-man",
</span><span class="line">        "id": 3,
</span><span class="line">        "name": "22F3CF"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">        "category": "machine-gun",
</span><span class="line">        "id": 4,
</span><span class="line">        "name": "811E8A"
</span><span class="line">    }
</span><span class="line">    ,
</span><span class="line">    ...
</span><span class="line">]
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You came out of a high-profile meeting and all the generals agree that this formation will be best to fight the enemy; <em>infantry</em>, <em>machine-gun</em> and <em>rocket-man</em>. How can I rearrange this quick enough because we’re going to attack tomorrow? Simple I go ahead and write the code.</p>

<p>First, let’s generate a bunch of soldiers</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Soldier</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="n">category</span>
</span><span class="line">
</span><span class="line"><span class="n">number_of_soldier</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class="line">
</span><span class="line"><span class="n">soldiers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">number_of_soldier</span><span class="p">):</span>
</span><span class="line">    <span class="n">name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()</span><span class="o">.</span><span class="n">get_hex</span><span class="p">()</span><span class="o">.</span><span class="n">upper</span><span class="p">()[</span><span class="mi">0</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span>
</span><span class="line">    <span class="n">soldiers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Soldier</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">categories</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then let’s rearrange them.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">uuid</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;infantry&#39;</span><span class="p">,</span> <span class="s">&#39;machine-gun&#39;</span><span class="p">,</span> <span class="s">&#39;rocket-man&#39;</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">categories</span><span class="p">:</span>
</span><span class="line">    <span class="n">s_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">soldiers</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">category</span> <span class="o">==</span> <span class="n">c</span><span class="p">:</span>
</span><span class="line">            <span class="n">s_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">result</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">s_list</span><span class="p">)</span>
</span><span class="line">    <span class="n">s_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It works, but you’re too late you can’t form the soldiers in time. If you take a closer look, this algorithm takes <em>O(n</em>m)* for the time complexity given the number of soldiers is <em>n</em> and the <em>category</em> is <em>m</em>. If you have a million soldiers and a million categories you would get <em>O(n^2)</em>. How can we make this one faster?</p>

<p>Here’s my second version. Hmm, rearrange into category… category is bucket. How about using map?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class="line">
</span><span class="line"><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line"><span class="n">map_of_soldiers</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">soldiers</span><span class="p">:</span>
</span><span class="line">    <span class="n">map_of_soldiers</span><span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">category</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">categories</span><span class="p">:</span>
</span><span class="line">    <span class="n">result</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">map_of_soldiers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is the time difference of those two algorithms.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="mf">0.00743103027344</span>
</span><span class="line"><span class="mf">0.00331783294678</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By just changing the data structure, you can see that the <em>map</em> version is almost twice as fast. I hope I can demostrate how choosing the right algorithm matters in your program.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress on crack]]></title>
    <link href="https://www.noppanit.com/octopress-on-crack/"/>
    <updated>2015-10-07T22:44:22-04:00</updated>
    <id>https://www.noppanit.com/octopress-on-crack</id>
    <content type="html"><![CDATA[<p>I believe you will find a ton of blogs writing about makeing Octopress faster. I believe nearly everyone who migrated their blog to Octopress, the first post would be the migration and the next would be performance tuning. I want to be the cool kid so here you go.</p>

<p>Once you got out of WordPress now there’s much more you can do about your performance. But before you start, nothing can be done before you have the baseline numbers</p>

<h2 id="before">Before</h2>

<p>Here’s my before performance from Google PageSpeed.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/google-pagespeed-before.jpg" title="Google PageSpeed before performance" /></p>

<p>And from webpagetest.org</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/before-perf-noppanit-com.jpg" title="Webpagetest before performance" /></p>

<p>In a nutshell, my page starts to render in <em>2.4s</em> and finishes in <em>4s</em>. Yikes! I wouldn’t even want to wait for my site to load. Let’s see where’s the lowest hanging fruit.</p>

<h2 id="what-about-images">What about images?</h2>

<p>A picture is worth a thousand words. Who doesn’t like image right? Also, I tend to have a lot of screenshots and they’re all PNGs. And they tend to be big. As they’re all screenshots so I don’t really care about losing some of the quality so I convert them to be jpg. If you’re using OSX, there’s a command that you can run.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sips -s format jpeg your_png.png --out your_pic.jpg</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now what can we do to reduce the size? There’s lots of tools out there that you can just throw your image in and it will compress the image for you. I use <a href="https://compressor.io/">compressor.io</a>. It’s really good. Just try throwing your image in there and see what happens. Compressor.io can reduce my images up to 60% and that saves a lot of bandwidth.</p>

<h2 id="minify-cssjs">Minify CSS/JS</h2>

<p>Fortunetely, I use <a href="https://www.cloudflare.com/">Cloudflare</a> and they have the feature to minify that for you. So, I just flipped the switch and it works like magic.</p>

<h2 id="browser-caching">Browser caching</h2>

<p>Going back to what Google PageSpeed tells us again. It complaints about <em>Leverage browser caching</em>. I’m lucky again because in Cloudflare you can set the cache to be 30 days and that seems to be ok for Google.</p>

<h2 id="inline-css">Inline CSS</h2>

<p>I use <a href="https://github.com/tommy351/Octopress-Theme-Slash">Slash</a> theme and when I look at the CSS, it’s only 22K. So why not just inline it and save one more request for the browser. So, in <em>_includes/head.html</em> you can change the line that includes your stylesheet to be.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;style&gt;
</span><span class="line">		{\% include screen.css %} # delete '\' in front of % before you paste this snippet
</span><span class="line">	&lt;/style&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This might be different from theme to theme but it shouldn’t be difficult to find that out.</p>

<h2 id="after">After</h2>

<p>Now, let’s have a quick look at the after performance.</p>

<p>Here’s my after performance from Google PageSpeed.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/google-pagespeed-after.jpg" title="Google PageSpeed after" /></p>

<p>It’s a lot better now but there’s one tiny problem with mobile which I’ll write another blog post about that.</p>

<p>Let’s have a look at webpagetest now.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/webpagetest-after.jpg" title="Webpagetest After" /></p>

<p>A lot better! It’s still not the best but now my page loads within <em>0.5s</em> and finishes in <em>1.9s</em>. However, there’s still a lot to work on mobile.</p>

<p>I could shead about 200ms by not using SSL but I’m willing to compromise that with a little bit of security.</p>

<h2 id="whats-next">What’s next</h2>

<p>I’d like to try hosting the images on S3 to see if that would speed up the load time. And I want to make the images responsive for mobile.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrated from WordPress to Octopress]]></title>
    <link href="https://www.noppanit.com/migrated-from-wordpress-to-octopress"/>
    <updated>2015-10-02T15:39:34-04:00</updated>
    <id>https://www.noppanit.com/migrated-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>I have heard so much about Octopress but I haven’t got the time to actually get to know what it can offer. Finally, this week I finally made the time to migrate my blog to Octopress and I love it. Thanks to <a href="https://habitica.com">HabitRPG</a> and Pomodoro (These will be another blog).</p>

<p>Don’t get me wrong I still love WordPress. In fact, I’m actually a WordPress Developer myself. However, for the post 9 years that I have noppanit.com I haven’t really used any of the WordPress features. What I really need is just a blog that I can write and publish. Octopress serves me well.</p>

<p>I’d like to thank <a href="https://twitter.com/ScottMuc">Scott Muc</a> that inspired me for this migration.</p>

<p>Here are some of the reasons why I migrated my blog to Octopress.</p>

<h2 id="hosting">Hosting</h2>

<p>Having a hosting is nice but it would be nicer if I don’t have to maintain it especially when I have to contact the customer service. Octopress gives you various choices of how to deploy your blog to. I chose to deploy my blog to Github as it’s the fatest and easiest option. I don’t need anything else just github.com which I use it everyday and a couple of command lines. Now, I don’t have to worry about upgrading my plugins or WordPress anymore. However, usually my hosting would do it for me if I haven’t updated for a long time.</p>

<h2 id="writing-code-snippet">Writing code snippet</h2>

<p>I think this is personal, because any good WordPress developer might argue that you can do the same in WordPress editor which I agree. However, having written a lot of MarkDown on Github I’m just used to use codeblock like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// something amazing</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>WordPress gets on my nerves everytime when my blog crashed and all the identations of my code blocks failed.</p>

<h2 id="performance">Performance</h2>

<p>There’s nothing faster than plain HTML. Well, that depends on your server. After deploying to Github pages all my posts are backed up and secured in Github. Then after that, it’s up to Github how fast they can deliver my HTML to the browser which I think it’s pretty fast.</p>

<p>One can argue that having WordPress properly tuned then you can get the same performance out of it as well. However, I just believe that Octopress is just easier to make changes. One reason relates to how limited your hosting can offer as well. Some of them are quite limited of how much you can do with the webserver without the dedicated server.</p>

<p>Here’s some of the performance breakdown which I haven’t tuned.</p>

<h3 id="before">Before</h3>

<p><a href="http://www.webpagetest.org/result/151002_33_7N6/1/details/">noppanit.com performance</a></p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/before-perf-noppanit-com.jpg" /></p>

<h3 id="after">After</h3>

<p><a href="http://www.webpagetest.org/result/151002_NG_7P4/2/details/">noppanit.github.io performance</a></p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/after-perf-noppanit-com.jpg" /></p>

<p>The numbers don’t lie. After I switched to Octopress, my website renders in <em>1.392s</em>. That’s without doing anything else. I’m going to write another blog post how I tune my blog to get the most out of it. WordPress is a great framework but when it comes to performance tuning, it requires a lot of hacking.</p>

<p>I have attached the link to <a href="http://webpagetest.org">webpagetest</a> as well in case anybody is interested in more details.</p>

<h2 id="no-database">No Database</h2>

<p>Everybody knows that maintaining a database is a headache. Everytime you need to upgrade WordPress you need to backup database just in case something goes wrong and when you want to transfer the site you will need to do some hack to ensure that the data is transfered properly. However, one might argue that not having the database for Octopress can cause another migration a problem. If in the next year or two another blog framework comes along how will we integrate the data? I guess that’s the same question for WordPress as well. Personally, when the time comes I think somebody will create a plugin to transfer that. Open source is the best.</p>

<h2 id="problems">Problems</h2>

<p>Here’s some of the problems I have encountered during the migration. All of them were minors and it didn’t take much time to resolve them.</p>

<ol>
  <li>Code snippet wasn’t converted correctly. Some of the <code>&lt;code</code> block got transfered during the export as pure HTML. So, I went through all my posts and convert it manually to Markdown format. It’s a plus for me so I took the opportunity to clean up old posts.</li>
  <li>One of my posts was encoded in UTF-8. I got lucky because it’s just one post. So, I didn’t have any problem with it.</li>
  <li>Disqus comment wasn’t visible. This is because during the export <code>comments: true</code> wasn’t added so I had to do it manually. This is my command to get it done.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install gsed
</span><span class="line">find . -type f -exec gsed -i <span class="s2">&quot;s/\(title: .*\)/\1\ncomments: true/&quot;</span> <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You need to run this in your posts directory. It will add <code>comments: true</code> after the <code>title</code></p>

<p>I got really lucky that I didn’t have many issues during the migration.</p>

<h2 id="what-tool-did-i-use">What tool did I use</h2>

<ol>
  <li><a href="https://github.com/benbalter/wordpress-to-jekyll-exporter">wordpress-to-jekyll-exporter</a> This is an awesome tool. One click and I get everything including all the pictures I uploaded.</li>
  <li><a href="https://www.cloudflare.com/">Cloudflare</a> This is for my SSL.</li>
</ol>

<h2 id="ssl">SSL</h2>

<p>This is just me. You can do the same for WordPress as well. I think every blog I came across about migrating to Octopress on Github pages mentioned having SSL to their website. It’s the perfect solution with Cloudflare but it’s the best free option I can find on the Internet. If Github decides to support full SSL later, I’d be happy to switch.</p>

<h2 id="its-not-for-everyone">It’s not for everyone</h2>

<p>Octopress claims to be blogging framework for hackers and it’s true. You can’t just give Octopress to non-technical people and expect them to be fluent. I think that’s what WordPress’s good for. You need to be familiar with git and command line to get it setup and deployed.</p>

<h2 id="insipiration">Insipiration</h2>

<ol>
  <li><a href="http://jason.pureconcepts.net/2013/01/migrating-wordpress-octopress/">Migrating from WordPress to Octopress</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Review with the world]]></title>
    <link href="https://www.noppanit.com/code-review-with-the-world/"/>
    <updated>2015-09-22T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/code-review-with-the-world</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>

<p>If you don’t know <a href="http://codereview.stackexchange.com/">Code Review Stackoverflow</a> you gotta get on it now. It works and it’s awesome.</p>

<h2 id="longer-version">Longer version</h2>

<p>In Agile world, everybody is talking about fail fast and faster feedback. If you’re a serious coder then code review and feedback are just as important. If you’re like me (maybe I’m alone), I used to hate code review so much because I don’t want someone to criticize my work, coding is like an art. You spent a lot of time on a piece of code and somebody just come in and say it sucks or why would you do something like that?. Not everybody is a great coder like Linus Torvalds or Ryan Dahl. Especially me, Because of rigorous code review I came from the worst coder every to bad coder (I’m still bad and I’m still learning). I believe the best way to learn any skill is first you have to be wrong and learn from your mistakes. The quickest way to do that is to code a lot and get your code reviewed by someone who’s a stronger coder than you, which you will have a lot on the Internet. If you work with some of the best programmers in your life then you’re lucky. But not everybody is that fortunate. I’ve found a better solution. <a href="http://codereview.stackexchange.com/">http://codereview.stackexchange.com/</a></p>

<h2 id="let8217s-get-to-the-meat">Let’s get to the meat</h2>

<p>For example, I wrote this piece of code to learn about dynamic programming.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import sys
</span><span class="line">coins = [1, 3, 5]
</span><span class="line">min_coin = [sys.maxint] * 20
</span><span class="line">min_coin[] = 
</span><span class="line">
</span><span class="line">for min_of_i in range(20):
</span><span class="line">    for c in coins:
</span><span class="line">        if c &lt;= min_of_i and (min_coin[min_of_i - c] + 1 &lt; min_coin[min_of_i]):
</span><span class="line">                min_coin[min_of_i] = min_coin[min_of_i - c] + 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I know that my code is not bad (or maybe is really bad), but let’s see what I get out of it from this <a href="http://codereview.stackexchange.com/questions/92811/find-the-minimum-number-of-coins">thread</a>. From within a day I have at least 2-3 points to make my code a lot better. Not only that I learn more about Python, I also learn how to optimize the script.</p>

<p>If you want to learn a new language fast, you need to learn from the expert. In just a few days I improved my code substantially. The best thing about the Internet is, you will have someone to review the reviewer as well. So, you can be sure to some extent that the one who answered your question is trustworthy.</p>

<p>Now you might wonder, how about <a href="http://stackoverflow.com/">http://stackoverflow.com/</a>? I use Stackoverflow too but Stackoverflow has its own purpose. If you’re stuck in some problem and you can’t really wrap your head around it posting to Stackoverflow will give you answer in no time. However, if you ask somebody on Stackoverflow to review your code, it’s likely that your thread will be voted down or closed.</p>

<h2 id="what-about-if-you-only-have-an-idea">What about if you only have an idea.</h2>

<p>I always have new idea and somehow I want experts to review or confirm my idea so I don’t waste time building something that somebody has done it before. Then, Stackoverflow or codereview.stackoverflow.com is not really the place you’d go for. That’s what I love about <a href="http://Quora.com">Quora.com</a>.</p>

<p>For example, I wanted to understand more about machine learning and I couldn’t really ask on <a href="http://stats.stackexchange.com">stats.stackexchange.com</a>. That’s why I turned to Quora. For example, this <a href="https://www.quora.com/How-do-I-start-if-I-want-to-build-a-model-to-predict-if-a-tweet-will-go-viral/answer/Shankar-Iyer-5?__snids__=1350032536&amp;__nsrc__=2">thread</a>, I got a really detailed response from whom I can trust because of the number of upvotes.</p>

<h2 id="some-note">Some note</h2>

<p>I have one bad habit of just copying and pasting someone else’s code. Once you received the feedback, don’t just copy and paste that. Or if you get feedback from Github don’t just merge that right away. You will not fully understand the concept behind that. In the book I read recently, <a href="http://www.amazon.com/o/ASIN/039916524X/sciencefriday/">A Mind For Numbers</a>, Barbara taught us about how we can master in math and science and she explains that we have two modes of learning, focused and diffuse mode. If you just copy and paste someone else’s work, then you just imagine that you understand what’s going on. The best way to learn that is to actually do it and go into diffuse mode which is just close your eyes and think about it and go back to focused mode to do that again. I made a big mistake as an Engineer (I still do) that I just copy someone else’s code and I think that I understand that fully which I don’t. So, don’t just copy the feedback and commit that make sure you fully understand the code and actually type it. Barbara also suggested that writing is better than just typing but I think it might be difficult for us programmers.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maps all parking signs in NYC.]]></title>
    <link href="https://www.noppanit.com/maps-all-parking-signs-in-nyc/"/>
    <updated>2015-07-30T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/maps-all-parking-signs-in-nyc</id>
    <content type="html"><![CDATA[<p>This post might be too easy for any Data-viz people but as a beginner tapping in this area. It took me quite a long time to figure it out so I just want to share this hoping that it might save people’s time.</p>

<p>Parking in NYC is really a pain, especially street parking where there’re lots of signs and regulations. There are some apps on Android and iPhone that you can download and see signs but I haven’t been able to find the one that suits my needs. I want an application that can tell me where to circle arounds on which day and time to find parking spot. For example, I parked my car on a Tuesday which has street cleaning on Wednesday and Friday from 8:30 to 9:30. That means I have to move the car on Wednesday morning to find a spot for Friday. The problem is I don’t know what’s around me. The closest application I find is <a href="http://www.nycparklife.com/streetparker/">http://www.nycparklife.com/streetparker/</a> which it doesn’t have Manhattan.</p>

<h2 id="getting-the-data">Getting the data</h2>

<p>So, I googled and thank NYC.gov that provides the <a href="http://www.nyc.gov/html/dot/html/about/datafeeds.shtml#parking">data</a> for us. First, I played around with the csv files but they don’t have coordinates that I can place location on the map. And I have no experience dealing with shapefiles.</p>

<h2 id="extracting-the-data">Extracting the data</h2>

<p>After a few hours of mangling and munching the csv with Pandas and R. I would not be able to get the exact locations of all the signs. So I turned to shapefile hoping that I might get lucky. And I found this <a href="http://www.shpescape.com/">http://www.shpescape.com/</a> which promised to transform shapefile to <a href="https://support.google.com/fusiontables/answer/2571232?hl=en">Google Fusion Table</a>. Awesome! I went ahead and tried it. It works great! but it only gives you the first 100,000 rows. So dug deeper. After another few hours of googling I found <a href="http://www.qgis.org/en/site/">qGis</a> which is a opensource project that you can use to open and view shapefile.</p>

<p>Here’s the example.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-12.52.32.jpg" title="Parking signs on Qgis" /></p>

<p>One thing I learnt was that you cannot just click <strong>Open</strong> and choose the file. What you need to do is to <string>Add Vector Layer&lt;/strong&gt;. You can use shortcut **Ctrl+Shift+v**</string></p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-12.55.56.jpg" title="Add Vector Layer" /></p>

<h2 id="export-to-google-fusion">Export to Google Fusion</h2>

<p>Now what we need is to import what we have to Google Fusion Table. How are we going to turn this beautiful layer to Google Maps. We need CSV…</p>

<p>In QGis you can download the file as CSV. It’s in <strong>Layer &gt; Save As</strong>. You just need to make sure that <strong>Geometry</strong> has to be set so you get the coordinates.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.02.06.jpg" title="Save to CSV" /></p>

<h2 id="import-to-google-fusion-table">Import to Google Fusion Table</h2>

<p>Now we can use that CSV to import to Google Fusion. It would look something like this.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.04.35.jpg" title="Google Fusion Table" /></p>

<p>what you need to make sure is that you need to specify which fields are Lat, Long so Google can plot that for you.</p>

<p>Here’s how you do it.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.05.41.jpg" /></p>

<p>The click <strong>change</strong> You will see something like this and you can choose which field you want to be Longitude or Latitude.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.06.33.jpg" title="Set Location" /></p>

<p>Once the coordinates have set we can go to Map tab and see beautiful little dots that show where all the signs are in NYC.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.07.47.jpg" title="Parking signs in Google Fusion Table" /></p>

<p>Walla! Now you have something you can build an application on top of it. The next post, I will create an application on top of this map to make use of our data.</p>

<h2 id="things-i-have-tried-and-failed">Things I have tried and failed</h2>

<p>I’ve tried using <a href="https://github.com/OSGeo/proj.4">Proj4</a> on both R and Python to convert X,Y WGS84 to Lat, Long. Here’s my little snippet.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">data = read.csv('./parking_regulation.csv')
</span><span class="line">
</span><span class="line">library(proj4)
</span><span class="line">proj4string &lt;- "+proj=lcc +lat_1=40.66666666666666 +lat_2=41.03333333333333 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"
</span><span class="line">latlong_list&lt;-list()
</span><span class="line">calculate_long_lat &lt;- function(x,y) {
</span><span class="line">  
</span><span class="line">  # Source data
</span><span class="line">  xy &lt;- data.frame(x=x, y=y)
</span><span class="line">  
</span><span class="line">  # Transformed data
</span><span class="line">  pj &lt;- project(xy, proj4string, inverse=TRUE)
</span><span class="line">  latlon &lt;- data.frame(lat=pj$y, lon=pj$x)
</span><span class="line">  latlong_list[['latlong']] &lt;- latlon
</span><span class="line">}
</span><span class="line">
</span><span class="line">apply(data[,c('x','y')], 1, function(y) calculate_long_lat(y['x'], y['y']))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result is not quite accurate which I think it’s because I need to find a correct <strong>proj4string</strong>.</p>

<p>Python has the same wrapper which is quite what I want as well.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from pyproj import Proj
</span><span class="line">import pandas as pd
</span><span class="line">
</span><span class="line">data = pd.read_csv('parking_regulation.csv')
</span><span class="line">
</span><span class="line">p = Proj(r'+proj=lcc +lat_1=40.66666666666666 +lat_2=41.03333333333333 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs')
</span><span class="line">
</span><span class="line">def cal_long_lat(row):
</span><span class="line">    return p(row['x'], row['y'],inverse=True)
</span><span class="line">
</span><span class="line">data['lon'], data['lat'] = zip(data.apply (lambda row: cal_long_lat (row),axis=1))
</span><span class="line">data.head()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I will need to learn more about State Pane and what is the correct format.</p>

<p>This article takes 2 pomodoros to complete.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I&#8217;m never going back to modern editor again.]]></title>
    <link href="https://www.noppanit.com/im-never-going-back-to-modern-editor-again/"/>
    <updated>2015-07-17T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/im-never-going-back-to-modern-editor-again</id>
    <content type="html"><![CDATA[<p>Ok, the title might be a little bit exaggerating. But let me clear this up first. I still use modern editors, TextMate, Atom.io or IntelliJ. They are pros and cons. But here’s my real answer if people ask me. I want to be the cool kid!.</p>

<table>
  <tbody>
    <tr>
      <td>I don’t know if you’re like me but I get asked almost all the time I go to a meetup or conference, “What’s your favourite editor”?. People almost always say Vim</td>
      <td>Emacs. I tried both of them in the past and gave up more than I can remember because of all the shortcuts and plugins and I just get too frustrated to use either of them. Finally, I have made a decision that I’m going to stick with Vim for a month and let’s see if at the end of the month I still can’t use it. It’s been almost a month and I’d say I’m never going back to modern editors again (at least when I’m coding scripting languages). Here’s why.</td>
    </tr>
  </tbody>
</table>

<h3 id="it8217s-just-easier">It’s just easier</h3>

<p>I know it’s not really easier than TextMate or Sublime. You still have to learn a lot of shortcuts and commands. Also, bare-bone Vim just doesn’t have when you get in TextMate or Sublime (e.g, Find file, Command+T, Directory structure or code completion). However, after you powered through that learning phrase everything is just natural to you.</p>

<p>If you want to clear any trailing whitespaces you just have to type <strong>%s/\s+$//</strong> and hit enter. If you want to run some external command you can always do in Vim. For example, if you just want to <strong>git status</strong> you can install <a href="https://github.com/tpope/vim-fugitive">Git wrapper</a> or you can just run <strong>:!git status</strong>. You don’t even need to go to your terminal which I think it’s faster.</p>

<p>If you’re a good engineer, you will always do TDD. Going back and fourth between the editor and terminal, it’s just too annoying. I remember when I was coding Java I can just hit Cmd+t in IntelliJ or .NET and you see green bars. Isn’t it just awesome? I realised that TextMate and Sublime have plugins to do that as well or you can just write your own plugin or package. I tried a couple of plugins and they never work for me. In Vim, it just works!.</p>

<h3 id="community">Community</h3>

<table>
  <tbody>
    <tr>
      <td>If Vim</td>
      <td>Emacs doesn’t do what you want, you will almost always find the plugin that does it for you. Currently, my standard plugins are. <strong>NERDTree</strong>, <strong>CommandT</strong>, <strong>vim-fugitive</strong>, <strong>vim-rooter</strong>, <strong>vim-virtualenv</strong>. All these plugins just make my Vim functions the same as Atom.io or Sublime.</td>
    </tr>
  </tbody>
</table>

<h3 id="not-for-everyone">Not for everyone</h3>

<p>I have to admit that the first few weeks I got really frustrated. I almost banged my keyboard against the monitor. I found myself opening Atom.io every time I couldn’t do some basic editing in Vim. For example, using <strong>vimgrep</strong> wasn’t what I expected and I ended up googling a lot. Now I get the hang of it and I don’t use Atom anymore. The worst case is I will just use command line instead.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to start doing TDD for jQuery plugin.]]></title>
    <link href="https://www.noppanit.com/how-to-start-doing-tdd-for-jquery-plugin/"/>
    <updated>2015-07-09T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/how-to-start-doing-tdd-for-jquery-plugin</id>
    <content type="html"><![CDATA[<p>I’m a big fan of TDD. I get nervous every time when I put some code it without having tests. I’m developing a simple jQuery plugin and I think hey we can TDD this.</p>

<h2 id="what-is-it">What is it?</h2>

<p>The plugin is really simple. It turns ul tag to be taggable field. It’s similar to <a href="http://aehlke.github.io/tag-it/">tag-it</a> but with a lot less functionalities and doesn’t depend on jquery-ui</p>

<h2 id="what-you-need">What you need</h2>

<p>I decided to use Karma because I’m going to test a lot of behaviours and Karma seems like a good fit as it run on real browser. Here’s how I setup my project.</p>

<p>I chose jasmine-jquery because it’s easier to create some element to test and it’s easy to setup.</p>

<p>This is my <strong>gulpfile.js</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">karma</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-karma&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">testFiles</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">  <span class="s1">&#39;tests/vendors/jquery-1.11.3.min.js&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;tests/vendors/jasmine-jquery.js&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;src/**/*.js&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;tests/spec/**/*.js&#39;</span>
</span><span class="line"><span class="p">];</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Run test once and exit</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">testFiles</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">karma</span><span class="p">({</span>
</span><span class="line">      <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;karma.conf.js&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;run&#39;</span>
</span><span class="line">    <span class="p">}))</span>
</span><span class="line">  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Make sure failed tests cause gulp to exit non-zero </span>
</span><span class="line">    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">testFiles</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">karma</span><span class="p">({</span>
</span><span class="line">      <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;karma.conf.js&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;watch&#39;</span>
</span><span class="line">    <span class="p">}));</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is my <strong>karma.conf.js</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class="line">    <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;PhantomJS&#39;</span><span class="p">],</span>
</span><span class="line">    <span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jasmine&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here’s my first test</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Taggify&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">fixture</span><span class="p">;</span>
</span><span class="line">  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">fixture</span> <span class="o">=</span> <span class="nx">setFixtures</span><span class="p">(</span><span class="s1">&#39;&lt;ul id=&quot;tag&quot;&gt;&lt;/ul&gt;&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#tag&#39;</span><span class="p">).</span><span class="nx">taggify</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should initialize text box&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You will see that the test failed now we implement some code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">taggify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">create</span><span class="p">(</span><span class="nx">$theElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input class=&quot;tag-input&quot;&gt;&lt;/input&gt;&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$theElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$input</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now the test passed.</p>

<p>Now let’s add some event so when you hit enter the tag is added. So, I added one more test</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add a tag&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">input</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">Event</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">keyCode</span><span class="o">:</span> <span class="mi">13</span> <span class="p">}));</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">tags</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.tag-label&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">tags</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">tags</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now the test failed.</p>

<p>I’ll fix the test by doing this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">taggify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">create</span><span class="p">(</span><span class="nx">$theElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input class=&quot;tag-input&quot;&gt;&lt;/input&gt;&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$input</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">tagText</span> <span class="o">=</span> <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="kd">var</span> <span class="nx">$span</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;tag-label&quot;&gt;&lt;/span&gt;&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="nx">$span</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">tagText</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&quot;tag-choice&quot;&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$theElement</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$span</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class="line">        <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$theElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$input</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now I want to add some negative test case.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should not add a tag&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">input</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">Event</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">keyCode</span><span class="o">:</span> <span class="mi">13</span> <span class="p">}));</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">tags</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.tag-label&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">tags</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toBeFalsy</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oops the test failed, looks like I missed something</p>

<p>I will fix the test by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">taggify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">create</span><span class="p">(</span><span class="nx">$theElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input class=&quot;tag-input&quot;&gt;&lt;/input&gt;&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$input</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">tagText</span> <span class="o">=</span> <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="nx">tagText</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="kd">var</span> <span class="nx">$span</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;tag-label&quot;&gt;&lt;/span&gt;&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">          <span class="nx">$span</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">tagText</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&quot;tag-choice&quot;&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class="line">          <span class="nx">$theElement</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$span</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class="line">          <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$theElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$input</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it. I hope you enjoy and love TDD more. And here’s the <a href="https://github.com/noppanit/taggify">github repo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The most basic example of Linear Regression]]></title>
    <link href="https://www.noppanit.com/the-most-basic-example-of-linear-regression/"/>
    <updated>2015-07-07T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/the-most-basic-example-of-linear-regression</id>
    <content type="html"><![CDATA[<p>Just for fun, I wanted to learn how to do linear regression and here’s the example I come up with.</p>

<p>Let’s say you have a historical data of 1000 people who dined in your restaurant and left a tip. This is going to be perfect data because I generated. In the real world you will not find something like this.</p>

<p>If you don’t understand Linear Regression like me before I wrote this post, I recommend you to read this <a href="http://onlinestatbook.com/2/regression/intro.html">basic linear regression.</a>.</p>

<p>The idea is that you have two variables. In this case, it’s <strong>tips</strong> and <strong>total amount of bill</strong>. You should explore the data by plotting the graph of these two variables. From my generated data you will get something like this.</p>

<p><img src="wp-content/uploads/2015/07/Screenshot-2015-07-07-00.54.42.jpg" title="Linear Regression" /></p>

<p>You can clearly see that there’s a strong correlation between the amount of tip and meal.</p>

<p>Now if you can find the slope of the graph and intercept you should be able to use the formula.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Y = MX + C
</span><span class="line">
</span><span class="line">M = slope of the graph
</span><span class="line">C = Intercept</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you’re lazy to look at my <a href="https://github.com/noppanit/linear-regression-basic">notebook</a>.</p>

<p>Then you can run this code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">stats</span>
</span><span class="line">
</span><span class="line"><span class="n">total_bills</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class="line"><span class="n">tips</span> <span class="o">=</span> <span class="n">total_bills</span> <span class="o">*</span> <span class="mf">0.10</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">tips</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;tips&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">total_bills</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;total_bills&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">slope</span><span class="p">,</span> <span class="n">intercept</span><span class="p">,</span> <span class="n">r_value</span><span class="p">,</span> <span class="n">p_value</span><span class="p">,</span> <span class="n">std_err</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">linregress</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">total_bills</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">tips</span><span class="p">)</span>
</span><span class="line"><span class="n">predicted_tips</span> <span class="o">=</span> <span class="p">(</span><span class="n">slope</span> <span class="o">*</span> <span class="mi">70</span><span class="p">)</span> <span class="o">+</span> <span class="n">intercept</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result is $7 which corresponds to the 10% tip.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example: How did I convert async code to sync code with Promise.]]></title>
    <link href="https://www.noppanit.com/example-how-did-i-convert-async-code-to-sync-code-with-promise/"/>
    <updated>2015-05-24T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/example-how-did-i-convert-async-code-to-sync-code-with-promise</id>
    <content type="html"><![CDATA[<p>I’ve just finished my first refactor to convert my node.js code to be more promisey (I believe that’s the word they use these days). There’s lots of documents out there to do this. However, I thought I should contribute more to help me understand more and might get some feedback from people who’s seen it as well.</p>

<p>I’m trying to create a bot to report me back the performance of my site in desktop and mobile mode. So, I thought it would be easy since Google has an <a href="https://developers.google.com/speed/docs/insights/v2/getting-started">API</a> for that already so I went ahead and did this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">urlToGetTheScore</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=desktop&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScore</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s pretty easy and straight forward right but now that would only return the score of desktop. I need the score of my mobile site as well. So, I added more code to be like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">urlToGetTheScoreDesktop</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=desktop&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">urlToGetTheScoreMobile</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=mobile&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreDesktop</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreMobile</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s great but I want to return both scores to a client so I can report the scores rather than printing them to the console. Since, <strong>request</strong> is asynchronous you cannot guarantee which score would come first. So, I thought it’s easy. I just need to call one request after the other. So, I came up with this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">urlToGetTheScoreDesktop</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=desktop&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">urlToGetTheScoreMobile</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=mobile&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreDesktop</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">desktopScore</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreMobile</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">mobileScore</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;desktop score is &#39;</span> <span class="o">+</span> <span class="nx">desktopScore</span> <span class="o">+</span> <span class="s1">&#39; and mobile score is &#39;</span> <span class="o">+</span> <span class="nx">mobileScore</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Look at how ugly it is. Now I want to make it prettier. So, I will use Promise to make it look nicer. As a good engineer I need to create a test first.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">perfModule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./pagespeed&#39;</span><span class="p">),</span>
</span><span class="line"><span class="nx">sinon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sinon&#39;</span><span class="p">),</span>
</span><span class="line"><span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">),</span>
</span><span class="line"><span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;expect.js&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Performance&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">server</span><span class="p">;</span>
</span><span class="line">  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="s1">&#39;get&#39;</span><span class="p">).</span><span class="nx">yields</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">ruleGroups</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">SPEED</span><span class="o">:</span> <span class="p">{</span><span class="nx">score</span><span class="o">:</span><span class="mi">10</span><span class="p">}}</span> <span class="p">}));</span>
</span><span class="line">    <span class="nx">done</span><span class="p">();</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should send performance stats to chat room&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">perfModule</span><span class="p">.</span><span class="nx">pagespeed</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">donotknow</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">done</span><span class="p">();</span>
</span><span class="line">      <span class="nx">expect</span><span class="p">(</span><span class="nx">msg</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s1">&#39;desktop speed is 10 and mobile speed is 10&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’m using <a href="http://sinonjs.org/">Sinon.js</a> as the mocking framework and <a href="http://mochajs.org/">Mocha</a> as the testing framework which are pretty standard.</p>

<p>Now I can start refactor my code. At first, I wrote some code like this, just to make it work.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">getSpeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">strategy</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=&#39;</span><span class="o">+</span> <span class="nx">strategy</span> <span class="o">+</span> <span class="s1">&#39;&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class="line">      <span class="nx">resolve</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">pagespeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;desktop&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">desktopSpeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;mobile&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mobileSpeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;desktop speed is &#39;</span> <span class="o">+</span> <span class="nx">desktopSpeed</span> <span class="o">+</span> <span class="s1">&#39; and mobile speed is &#39;</span> <span class="o">+</span> <span class="nx">mobileSpeed</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">exports</span><span class="p">.</span><span class="nx">pagespeed</span> <span class="o">=</span> <span class="nx">pagespeed</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Any good JavaScript developer would be like, WTH!. You still have callbacks. I thought Promise would solve that issue already! Now, I could use the power of <strong>Promise.all</strong> which takes array of promises and return array of results. My final code would look something like this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">),</span>
</span><span class="line"><span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;promise&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">getSpeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">strategy</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http%3A%2F%2Ffusion.net&amp;amp;strategy=&#39;</span><span class="o">+</span> <span class="nx">strategy</span> <span class="o">+</span> <span class="s1">&#39;&amp;amp;fields=ruleGroups&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class="line">      <span class="nx">resolve</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">pagespeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;desktop&#39;</span><span class="p">),</span> <span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;mobile&#39;</span><span class="p">)]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">desktop</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">mobile</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;desktop speed is &#39;</span> <span class="o">+</span> <span class="nx">desktop</span> <span class="o">+</span> <span class="s1">&#39; and mobile speed is &#39;</span> <span class="o">+</span> <span class="nx">mobile</span><span class="p">);</span>
</span><span class="line">  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">exports</span><span class="p">.</span><span class="nx">pagespeed</span> <span class="o">=</span> <span class="nx">pagespeed</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’m not an expert in Promise and I welcome any feedback that would help improve my code.</p>

<p>Reference<br />
<a href="http://www.html5rocks.com/en/tutorials/es6/promises/">ES6 Promises</a><br />
<a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html">We have a problem with promises</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rise of the (Slack)Bots.]]></title>
    <link href="https://www.noppanit.com/rise-of-the-slackbots/"/>
    <updated>2015-05-23T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/rise-of-the-slackbots</id>
    <content type="html"><![CDATA[<p><a href="http://fusion.net">Fusion</a> tech team just had a hackday in the theme of “Slackbot”. We brainstormed what or how do we make the job of editorial or engineering team easier. We threw a bunch of ideas and my team decided to create a bot that can interact with you in a number of ways or encourage you to fix or debug code. We tried to make it funny and in the same time useful for our daily routine.</p>

<p>My colleague <a href="https://twitter.com/danielbachhuber">Daniel Bachhuber</a> came up with the name Rubberduck which I believe he got it from <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging">here</a>. The idea of the bot is easy. If you have used Slack you must have seen Slackbot before where it guides you how to use Slack or the bot can help you change your profile picture.</p>

<p>We spent a good one hour to find the best possible solution for creating a bot and we found <a href="https://github.com/silentrob/superscript/">Superscript</a>, which has a client for Slack. It’s perfect!.</p>

<p>We’ve also opensourced the <a href="https://github.com/fusioneng/rubberduck-bot">bot</a> which you can clone and play around with it as well.</p>

<p>The first plugin we are thinking is performance bot where the bot can report the current performance of a website instead of going to a dashboard. It’s because we have remote team. So, having a bit giant board wouldn’t make much sense since some of our folks are distributed and we mainly use Slack for any communication.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/05/Screenshot-2015-05-23-19.42.23.jpg" title="rubberduck bot" /></p>

<p>Now, go ahead and create your own bot!.</p>

<p> </p>

<p>Check this out. <a href="https://medium.com/@rob_ellis/slack-superscript-rise-of-the-bots-bba8506a043c">Rise of the bots</a></p>

]]></content>
  </entry>
  
</feed>

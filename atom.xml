<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Blog]]></title>
  <link href="https://www.noppanit.com/atom.xml" rel="self"/>
  <link href="https://www.noppanit.com/"/>
  <updated>2015-10-29T10:10:45-04:00</updated>
  <id>https://www.noppanit.com/</id>
  <author>
    <name><![CDATA[Noppanit Charassinvichai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python's Monkey patch for Dummies]]></title>
    <link href="https://www.noppanit.com/pythons-monkey-patch/"/>
    <updated>2015-10-25T19:00:27-04:00</updated>
    <id>https://www.noppanit.com/pythons-monkey-patch</id>
    <content type="html"><![CDATA[<p>Alright, I&rsquo;m going to cut to the chase here. I&rsquo;m having problems with Monkey patching in Python and I want to make it clear for myself and anybody who might stumble upon my post in the future. So, what&rsquo;s the big deal here?</p>

<p>Let&rsquo;s say you have a model</p>

<figure class='code'><figcaption><span>models/person.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_name</span><span class="p">():</span>
</span><span class='line'>  <span class="o">//</span> <span class="n">Doing</span> <span class="n">some</span> <span class="n">database</span> <span class="n">lookup</span>
</span><span class='line'>  <span class="o">//</span> <span class="n">But</span> <span class="n">I</span><span class="s">&#39;m going to return a hard-coded name for now</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&#39;John Doe&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you have a Phonebook class that&rsquo;s trying to access the database</p>

<figure class='code'><figcaption><span>models/phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">models.person</span> <span class="kn">import</span> <span class="n">get_name</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Phonebook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">get_name</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we know that <code>get_name</code> is accessing some database and we don&rsquo;t want that to happen in unit test. We would like to stub that.</p>

<p>Coming from Java, I&rsquo;d write my test like this.</p>

<figure class='code'><figcaption><span>tests/test_phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span><span class="p">,</span> <span class="n">mock</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">models.phonebook</span> <span class="kn">import</span> <span class="n">Phonebook</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PhonebookTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;models.person.get_name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_main</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_person</span><span class="p">):</span>
</span><span class='line'>        <span class="n">mock_person</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">&#39;Another Name&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="s">&#39;Another Name&#39;</span><span class="p">,</span> <span class="n">Phonebook</span><span class="p">()</span><span class="o">.</span><span class="n">lookup</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>It makes sense right? I want to stub something from <code>models.person.get_name</code> so I&rsquo;m telling <code>mock</code> to stub that class but my test failed miserably.</p>

<figure class='code'><figcaption><span>tests/test_phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tests</span><span class="o">/</span><span class="n">test_phonebook</span><span class="o">.</span><span class="n">py</span> <span class="n">F</span>
</span><span class='line'>
</span><span class='line'><span class="o">===================================================================================</span> <span class="n">FAILURES</span> <span class="o">===================================================================================</span>
</span><span class='line'><span class="n">_________________________________________________________________________</span> <span class="n">PhonebookTestCase</span><span class="o">.</span><span class="n">test_main</span> <span class="n">__________________________________________________________________________</span>
</span><span class='line'>
</span><span class='line'><span class="bp">self</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">tests</span><span class="o">.</span><span class="n">test_phonebook</span><span class="o">.</span><span class="n">PhonebookTestCase</span> <span class="n">testMethod</span><span class="o">=</span><span class="n">test_main</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">mock_person</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">MagicMock</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;get_name&#39;</span> <span class="nb">id</span><span class="o">=</span><span class="s">&#39;4460968592&#39;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;models.person.get_name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_main</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_person</span><span class="p">):</span>
</span><span class='line'>        <span class="n">mock_person</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">&#39;Another Name&#39;</span>
</span><span class='line'><span class="o">&gt;</span>       <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="s">&#39;Another Name&#39;</span><span class="p">,</span> <span class="n">Phonebook</span><span class="p">()</span><span class="o">.</span><span class="n">lookup</span><span class="p">())</span>
</span><span class='line'><span class="n">E</span>       <span class="ne">AssertionError</span><span class="p">:</span> <span class="s">&#39;Another Name&#39;</span> <span class="o">!=</span> <span class="s">&#39;John Doe&#39;</span>
</span><span class='line'><span class="n">E</span>       <span class="o">-</span> <span class="n">Another</span> <span class="n">Name</span>
</span><span class='line'><span class="n">E</span>       <span class="o">+</span> <span class="n">Noppanit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why? Because <code>patch</code> behaves differently than what we expected. This is explained in <a href="http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch">Where to patch</a>. I&rsquo;m going to summarize for you. Basically, <code>patch</code> is going to take effect from where it is looked up&hellip; For me after reading that I&rsquo;m still confused. I might be the only one who&rsquo;s confused here so I&rsquo;m going to continue writing.</p>

<p>If we take a closer look how <a href="http://effbot.org/zone/import-confusion.htm">import</a> behaves in Python, it would be clearer.</p>

<figure class='code'><figcaption><span>models/phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">models.person</span> <span class="kn">import</span> <span class="n">get_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>The line says please import <code>get_name</code> to the namespace in <code>models/phonebook.py</code>. So, when we want to use it we can just called <code>get_name()</code> without having to write <code>models.person.get_name()</code> Now if you change your code to be</p>

<figure class='code'><figcaption><span>models/phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">models.person</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Phonebook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">models</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">get_name</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You test would pass. Because now our Phonebook is looking up <code>models.person.get_name</code> namespace instead of having function <code>get_name</code> being imported to its namespace.</p>

<p>Now if you want the old test to work, your <code>patch</code> has to be changed to</p>

<figure class='code'><figcaption><span>tests/test_phonebook.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span><span class="p">,</span> <span class="n">mock</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">models.phonebook</span> <span class="kn">import</span> <span class="n">Phonebook</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PhonebookTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@mock.patch</span><span class="p">(</span><span class="s">&#39;models.phonebook.get_name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_main</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_person</span><span class="p">):</span>
</span><span class='line'>        <span class="n">mock_person</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">&#39;Another Name&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="s">&#39;Another Name&#39;</span><span class="p">,</span> <span class="n">Phonebook</span><span class="p">()</span><span class="o">.</span><span class="n">lookup</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it for now. If you&rsquo;re wondering why this is the case then looking at the source code of patch would help a lot. It&rsquo;s using <a href="https://docs.python.org/3.5/library/functions.html#__import__"><code>__import__</code></a> function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should or should not SSL your blog]]></title>
    <link href="https://www.noppanit.com/why-you-should-or-should-not-ssl-your-blog/"/>
    <updated>2015-10-09T17:02:25-04:00</updated>
    <id>https://www.noppanit.com/why-you-should-or-should-not-ssl-your-blog</id>
    <content type="html"><![CDATA[<p>After I switched to Octopress, I knew that I wanted to write about performance and SSL. Those are the main reasons why I switched.</p>

<p>Last year, Google <a href="http://googlewebmastercentral.blogspot.com/2014/08/https-as-ranking-signal.html">announced</a> that they will include Https as a single in their ranking. So, if you want to be the cool kid, go and SSL your site now. But what does SSL really do to your site? Have you seen that in action? I only know that from reading all the blog posts about this. In this blog, I&rsquo;ll show you what SSL does to your site.</p>

<p>Thanks to my friend <a href="https://twitter.com/suksant">Suksant</a> who helped me conducting the test.</p>

<h2>What will you need?</h2>

<ol>
<li><a href="https://www.wireshark.org/">Wireshare</a> is a network protocal analysis.</li>
</ol>


<h2>Simple website.</h2>

<p>I&rsquo;ve created a simple <a href="https://github.com/noppanit/SSL-Show-and-tell">site</a> that you can fake login form. So, you can go ahead and deploy that to your heroku. I chose Heroku as the platform of choice because you can try the site with and without SSL.</p>

<h2>Setup your wireshark</h2>

<p>There&rsquo;s a couple things you need to do before you can capture the password.</p>

<ol>
<li>Open your wireshark and go to <em>Capture -> Interfaces</em> and click <em>en0</em> that should be your Wifi connection.</li>
</ol>


<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/wireshark-setup-interface.jpg" title="Wireshark Interfaces" ></p>

<p>Then click &lsquo;Start&rsquo; to capture the packets</p>

<ol>
<li>In the <em>Filter</em> section, put this <em>frame contains topsecret</em> (That&rsquo;s going to be your password)</li>
</ol>


<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/wireshark-filter.jpg" title="Wireshark filter" ></p>

<h2>Capture the password</h2>

<ol>
<li>I deployed the application <a href="http://ssl-show-and-tell.herokuapp.com/login">here</a>. Go ahead and enter &ldquo;username&rdquo; in username and &ldquo;topsecretpassword&rdquo; in password It could be anything. Try to check if the URL is not SSL.</li>
</ol>


<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/form-to-submit-without-ssl.jpg" title="Form submit" ></p>

<ol>
<li>Once you&rsquo;ve submitted your password, you should see that Wireshark has captured something already.</li>
</ol>


<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/wireshark-captured-password.jpg" title="Wireshark with password" ></p>

<p>without even trying to do anything hard. You can clearly see the password.</p>

<h2>Now with SSL.</h2>

<ol>
<li>Change your URL to be *<a href="https:*">https:*</a></li>
<li>You will not find anything with your password on Wireshark</li>
</ol>


<h2>What gives?</h2>

<p>In conclusion, what have we learned here? SSL encrypts everything being sent to the server will be encrypted. It&rsquo;s safer and make the site more trustworthy. However, if you&rsquo;re just running a blog you probably won&rsquo;t need SSL. If you have a website that capture anything from the user then big &lsquo;YES&rsquo; you need SSL. For me, I just want to be a cool kid so I SSLed my site.</p>

<h2>Reference</h2>

<ol>
<li><a href="https://samsclass.info/120/proj/p3-wireshark.htm">Wireshark tutorial</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why algorithm matters?]]></title>
    <link href="https://www.noppanit.com/why-algorithm-matters/"/>
    <updated>2015-10-08T15:55:29-04:00</updated>
    <id>https://www.noppanit.com/why-algorithm-matters</id>
    <content type="html"><![CDATA[<p>If you have been to one of those technical interviews, you will like this.</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>&mdash; Max Howell (@mxcl) <a href="https://twitter.com/mxcl/status/608682016205344768">June 10, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I&rsquo;m not going to rant about how broken the technical interviews are. There&rsquo;s enough people who are more qualified to rant about this more than me.</p>

<p>So, why this matters? I just want to give a quick example of why algorithm matters. Please no haters! I know some of you might read this and will say &ldquo;I do that all the time, what&rsquo;s the big deal&rdquo;. I&rsquo;m still a bad developer and I&rsquo;m still learning.</p>

<h2>Scenario</h2>

<p>You are a general, your home country is at war and you have to fight for your country. You are given a group of soldiers. You want to come up with a strategy to win the battle. Here&rsquo;s the example of the soldiers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[
</span><span class='line'>    {
</span><span class='line'>        "category": "machine-gun",
</span><span class='line'>        "id": 0,
</span><span class='line'>        "name": "D408CF"
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>        "category": "machine-gun",
</span><span class='line'>        "id": 1,
</span><span class='line'>        "name": "C0BAD7"
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>        "category": "rocket-man",
</span><span class='line'>        "id": 2,
</span><span class='line'>        "name": "04B5E4"
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>        "category": "rocket-man",
</span><span class='line'>        "id": 3,
</span><span class='line'>        "name": "22F3CF"
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>        "category": "machine-gun",
</span><span class='line'>        "id": 4,
</span><span class='line'>        "name": "811E8A"
</span><span class='line'>    }
</span><span class='line'>    ,
</span><span class='line'>    ...
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>You came out of a high-profile meeting and all the generals agree that this formation will be best to fight the enemy; <em>infantry</em>, <em>machine-gun</em> and <em>rocket-man</em>. How can I rearrange this quick enough because we&rsquo;re going to attack tomorrow? Simple I go ahead and write the code.</p>

<p>First, let&rsquo;s generate a bunch of soldiers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Soldier</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="n">category</span>
</span><span class='line'>
</span><span class='line'><span class="n">number_of_soldier</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'><span class="n">soldiers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">number_of_soldier</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()</span><span class="o">.</span><span class="n">get_hex</span><span class="p">()</span><span class="o">.</span><span class="n">upper</span><span class="p">()[</span><span class="mi">0</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span>
</span><span class='line'>    <span class="n">soldiers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Soldier</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">categories</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then let&rsquo;s rearrange them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">uuid</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;infantry&#39;</span><span class="p">,</span> <span class="s">&#39;machine-gun&#39;</span><span class="p">,</span> <span class="s">&#39;rocket-man&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">categories</span><span class="p">:</span>
</span><span class='line'>    <span class="n">s_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">soldiers</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">category</span> <span class="o">==</span> <span class="n">c</span><span class="p">:</span>
</span><span class='line'>            <span class="n">s_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">s_list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works, but you&rsquo;re too late you can&rsquo;t form the soldiers in time. If you take a closer look, this algorithm takes <em>O(n</em>m)<em> for the time complexity given the number of soldiers is </em>n<em> and the </em>category<em> is </em>m<em>. If you have a million soldiers and a million categories you would get </em>O(n<sup>2</sup>)*. How can we make this one faster?</p>

<p>Here&rsquo;s my second version. Hmm, rearrange into category&hellip; category is bucket. How about using map?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'><span class="n">map_of_soldiers</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">soldiers</span><span class="p">:</span>
</span><span class='line'>    <span class="n">map_of_soldiers</span><span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">category</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">categories</span><span class="p">:</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">map_of_soldiers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the time difference of those two algorithms.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mf">0.00743103027344</span>
</span><span class='line'><span class="mf">0.00331783294678</span>
</span></code></pre></td></tr></table></div></figure>


<p>By just changing the data structure, you can see that the <em>map</em> version is almost twice as fast. I hope I can demostrate how choosing the right algorithm matters in your program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress on crack]]></title>
    <link href="https://www.noppanit.com/octopress-on-crack/"/>
    <updated>2015-10-07T22:44:22-04:00</updated>
    <id>https://www.noppanit.com/octopress-on-crack</id>
    <content type="html"><![CDATA[<p>I believe you will find a ton of blogs writing about makeing Octopress faster. I believe nearly everyone who migrated their blog to Octopress, the first post would be the migration and the next would be performance tuning. I want to be the cool kid so here you go.</p>

<p>Once you got out of WordPress now there&rsquo;s much more you can do about your performance. But before you start, nothing can be done before you have the baseline numbers</p>

<h2>Before</h2>

<p>Here&rsquo;s my before performance from Google PageSpeed.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/google-pagespeed-before.jpg" title="Google PageSpeed before performance" ></p>

<p>And from webpagetest.org</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/before-perf-noppanit-com.jpg" title="Webpagetest before performance" ></p>

<p>In a nutshell, my page starts to render in <em>2.4s</em> and finishes in <em>4s</em>. Yikes! I wouldn&rsquo;t even want to wait for my site to load. Let&rsquo;s see where&rsquo;s the lowest hanging fruit.</p>

<h2>What about images?</h2>

<p>A picture is worth a thousand words. Who doesn&rsquo;t like image right? Also, I tend to have a lot of screenshots and they&rsquo;re all PNGs. And they tend to be big. As they&rsquo;re all screenshots so I don&rsquo;t really care about losing some of the quality so I convert them to be jpg. If you&rsquo;re using OSX, there&rsquo;s a command that you can run.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sips -s format jpeg your_png.png --out your_pic.jpg</span></code></pre></td></tr></table></div></figure>


<p>Now what can we do to reduce the size? There&rsquo;s lots of tools out there that you can just throw your image in and it will compress the image for you. I use <a href="https://compressor.io/">compressor.io</a>. It&rsquo;s really good. Just try throwing your image in there and see what happens. Compressor.io can reduce my images up to 60% and that saves a lot of bandwidth.</p>

<h2>Minify CSS/JS</h2>

<p>Fortunetely, I use <a href="https://www.cloudflare.com/">Cloudflare</a> and they have the feature to minify that for you. So, I just flipped the switch and it works like magic.</p>

<h2>Browser caching</h2>

<p>Going back to what Google PageSpeed tells us again. It complaints about <em>Leverage browser caching</em>. I&rsquo;m lucky again because in Cloudflare you can set the cache to be 30 days and that seems to be ok for Google.</p>

<h2>Inline CSS</h2>

<p>I use <a href="https://github.com/tommy351/Octopress-Theme-Slash">Slash</a> theme and when I look at the CSS, it&rsquo;s only 22K. So why not just inline it and save one more request for the browser. So, in <em>_includes/head.html</em> you can change the line that includes your stylesheet to be.</p>

<figure class='code'><figcaption><span>html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;style>
</span><span class='line'>      {\% include screen.css %} # delete '\' in front of % before you paste this snippet
</span><span class='line'>  &lt;/style></span></code></pre></td></tr></table></div></figure>


<p>This might be different from theme to theme but it shouldn&rsquo;t be difficult to find that out.</p>

<h2>After</h2>

<p>Now, let&rsquo;s have a quick look at the after performance.</p>

<p>Here&rsquo;s my after performance from Google PageSpeed.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/google-pagespeed-after.jpg" title="Google PageSpeed after" ></p>

<p>It&rsquo;s a lot better now but there&rsquo;s one tiny problem with mobile which I&rsquo;ll write another blog post about that.</p>

<p>Let&rsquo;s have a look at webpagetest now.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/webpagetest-after.jpg" title="Webpagetest After" ></p>

<p>A lot better! It&rsquo;s still not the best but now my page loads within <em>0.5s</em> and finishes in <em>1.9s</em>. However, there&rsquo;s still a lot to work on mobile.</p>

<p>I could shead about 200ms by not using SSL but I&rsquo;m willing to compromise that with a little bit of security.</p>

<h2>What&rsquo;s next</h2>

<p>I&rsquo;d like to try hosting the images on S3 to see if that would speed up the load time. And I want to make the images responsive for mobile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrated from WordPress to Octopress]]></title>
    <link href="https://www.noppanit.com/migrated-from-wordpress-to-octopress"/>
    <updated>2015-10-02T15:39:34-04:00</updated>
    <id>https://www.noppanit.com/migrated-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>I have heard so much about Octopress but I haven&rsquo;t got the time to actually get to know what it can offer. Finally, this week I finally made the time to migrate my blog to Octopress and I love it. Thanks to <a href="https://habitica.com">HabitRPG</a> and Pomodoro (These will be another blog).</p>

<p>Don&rsquo;t get me wrong I still love WordPress. In fact, I&rsquo;m actually a WordPress Developer myself. However, for the post 9 years that I have noppanit.com I haven&rsquo;t really used any of the WordPress features. What I really need is just a blog that I can write and publish. Octopress serves me well.</p>

<p>I&rsquo;d like to thank <a href="https://twitter.com/ScottMuc">Scott Muc</a> that inspired me for this migration.</p>

<p>Here are some of the reasons why I migrated my blog to Octopress.</p>

<h2>Hosting</h2>

<p>Having a hosting is nice but it would be nicer if I don&rsquo;t have to maintain it especially when I have to contact the customer service. Octopress gives you various choices of how to deploy your blog to. I chose to deploy my blog to Github as it&rsquo;s the fatest and easiest option. I don&rsquo;t need anything else just github.com which I use it everyday and a couple of command lines. Now, I don&rsquo;t have to worry about upgrading my plugins or WordPress anymore. However, usually my hosting would do it for me if I haven&rsquo;t updated for a long time.</p>

<h2>Writing code snippet</h2>

<p>I think this is personal, because any good WordPress developer might argue that you can do the same in WordPress editor which I agree. However, having written a lot of MarkDown on Github I&rsquo;m just used to use codeblock like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// something amazing</span></code></pre></td></tr></table></div></figure>


<p>WordPress gets on my nerves everytime when my blog crashed and all the identations of my code blocks failed.</p>

<h2>Performance</h2>

<p>There&rsquo;s nothing faster than plain HTML. Well, that depends on your server. After deploying to Github pages all my posts are backed up and secured in Github. Then after that, it&rsquo;s up to Github how fast they can deliver my HTML to the browser which I think it&rsquo;s pretty fast.</p>

<p>One can argue that having WordPress properly tuned then you can get the same performance out of it as well. However, I just believe that Octopress is just easier to make changes. One reason relates to how limited your hosting can offer as well. Some of them are quite limited of how much you can do with the webserver without the dedicated server.</p>

<p>Here&rsquo;s some of the performance breakdown which I haven&rsquo;t tuned.</p>

<h3>Before</h3>

<p><a href="http://www.webpagetest.org/result/151002_33_7N6/1/details/">noppanit.com performance</a></p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/before-perf-noppanit-com.jpg"></p>

<h3>After</h3>

<p><a href="http://www.webpagetest.org/result/151002_NG_7P4/2/details/">noppanit.github.io performance</a></p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/10/after-perf-noppanit-com.jpg"></p>

<p>The numbers don&rsquo;t lie. After I switched to Octopress, my website renders in <em>1.392s</em>. That&rsquo;s without doing anything else. I&rsquo;m going to write another blog post how I tune my blog to get the most out of it. WordPress is a great framework but when it comes to performance tuning, it requires a lot of hacking.</p>

<p>I have attached the link to <a href="http://webpagetest.org">webpagetest</a> as well in case anybody is interested in more details.</p>

<h2>No Database</h2>

<p>Everybody knows that maintaining a database is a headache. Everytime you need to upgrade WordPress you need to backup database just in case something goes wrong and when you want to transfer the site you will need to do some hack to ensure that the data is transfered properly. However, one might argue that not having the database for Octopress can cause another migration a problem. If in the next year or two another blog framework comes along how will we integrate the data? I guess that&rsquo;s the same question for WordPress as well. Personally, when the time comes I think somebody will create a plugin to transfer that. Open source is the best.</p>

<h2>Problems</h2>

<p>Here&rsquo;s some of the problems I have encountered during the migration. All of them were minors and it didn&rsquo;t take much time to resolve them.</p>

<ol>
<li>Code snippet wasn&rsquo;t converted correctly. Some of the <code>&lt;code</code> block got transfered during the export as pure HTML. So, I went through all my posts and convert it manually to Markdown format. It&rsquo;s a plus for me so I took the opportunity to clean up old posts.</li>
<li>One of my posts was encoded in UTF-8. I got lucky because it&rsquo;s just one post. So, I didn&rsquo;t have any problem with it.</li>
<li>Disqus comment wasn&rsquo;t visible. This is because during the export <code>comments: true</code> wasn&rsquo;t added so I had to do it manually. This is my command to get it done.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install gsed
</span><span class='line'>find . -type f -exec gsed -i <span class="s2">&quot;s/\(title: .*\)/\1\ncomments: true/&quot;</span> <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to run this in your posts directory. It will add <code>comments: true</code> after the <code>title</code></p>

<p>I got really lucky that I didn&rsquo;t have many issues during the migration.</p>

<h2>What tool did I use</h2>

<ol>
<li><a href="https://github.com/benbalter/wordpress-to-jekyll-exporter">wordpress-to-jekyll-exporter</a> This is an awesome tool. One click and I get everything including all the pictures I uploaded.</li>
<li><a href="https://www.cloudflare.com/">Cloudflare</a> This is for my SSL.</li>
</ol>


<h2>SSL</h2>

<p>This is just me. You can do the same for WordPress as well. I think every blog I came across about migrating to Octopress on Github pages mentioned having SSL to their website. It&rsquo;s the perfect solution with Cloudflare but it&rsquo;s the best free option I can find on the Internet. If Github decides to support full SSL later, I&rsquo;d be happy to switch.</p>

<h2>It&rsquo;s not for everyone</h2>

<p>Octopress claims to be blogging framework for hackers and it&rsquo;s true. You can&rsquo;t just give Octopress to non-technical people and expect them to be fluent. I think that&rsquo;s what WordPress&rsquo;s good for. You need to be familiar with git and command line to get it setup and deployed.</p>

<h2>Insipiration</h2>

<ol>
<li><a href="http://jason.pureconcepts.net/2013/01/migrating-wordpress-octopress/">Migrating from WordPress to Octopress</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Review with the world]]></title>
    <link href="https://www.noppanit.com/code-review-with-the-world/"/>
    <updated>2015-09-22T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/code-review-with-the-world</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>If you don&#8217;t know <a href="http://codereview.stackexchange.com/">Code Review Stackoverflow</a> you gotta get on it now. It works and it&#8217;s awesome.</p>

<h2>Longer version</h2>

<p>In Agile world, everybody is talking about fail fast and faster feedback. If you&#8217;re a serious coder then code review and feedback are just as important. If you&#8217;re like me (maybe I&#8217;m alone), I used to hate code review so much because I don&#8217;t want someone to criticize my work, coding is like an art. You spent a lot of time on a piece of code and somebody just come in and say it sucks or why would you do something like that?. Not everybody is a great coder like Linus Torvalds or Ryan Dahl. Especially me, Because of rigorous code review I came from the worst coder every to bad coder (I&#8217;m still bad and I&#8217;m still learning). I believe the best way to learn any skill is first you have to be wrong and learn from your mistakes. The quickest way to do that is to code a lot and get your code reviewed by someone who&#8217;s a stronger coder than you, which you will have a lot on the Internet. If you work with some of the best programmers in your life then you&#8217;re lucky. But not everybody is that fortunate. I&#8217;ve found a better solution. <a href="http://codereview.stackexchange.com/">http://codereview.stackexchange.com/</a></p>

<h2>Let&#8217;s get to the meat</h2>

<p>For example, I wrote this piece of code to learn about dynamic programming.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">coins</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">min_coin</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span><span class="p">]</span> <span class="o">*</span> <span class="mi">20</span>
</span><span class='line'><span class="n">min_coin</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">min_of_i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">coins</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="n">min_of_i</span> <span class="ow">and</span> <span class="p">(</span><span class="n">min_coin</span><span class="p">[</span><span class="n">min_of_i</span> <span class="o">-</span> <span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">min_coin</span><span class="p">[</span><span class="n">min_of_i</span><span class="p">]):</span>
</span><span class='line'>                <span class="n">min_coin</span><span class="p">[</span><span class="n">min_of_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min_coin</span><span class="p">[</span><span class="n">min_of_i</span> <span class="o">-</span> <span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know that my code is not bad (or maybe is really bad), but let&#8217;s see what I get out of it from this <a href="http://codereview.stackexchange.com/questions/92811/find-the-minimum-number-of-coins">thread</a>. From within a day I have at least 2-3 points to make my code a lot better. Not only that I learn more about Python, I also learn how to optimize the script.</p>

<p>If you want to learn a new language fast, you need to learn from the expert. In just a few days I improved my code substantially. The best thing about the Internet is, you will have someone to review the reviewer as well. So, you can be sure to some extent that the one who answered your question is trustworthy.</p>

<p>Now you might wonder, how about <a href="http://stackoverflow.com/">http://stackoverflow.com/</a>? I use Stackoverflow too but Stackoverflow has its own purpose. If you&#8217;re stuck in some problem and you can&#8217;t really wrap your head around it posting to Stackoverflow will give you answer in no time. However, if you ask somebody on Stackoverflow to review your code, it&#8217;s likely that your thread will be voted down or closed.</p>

<h2>What about if you only have an idea.</h2>

<p>I always have new idea and somehow I want experts to review or confirm my idea so I don&#8217;t waste time building something that somebody has done it before. Then, Stackoverflow or codereview.stackoverflow.com is not really the place you&#8217;d go for. That&#8217;s what I love about <a href="http://Quora.com">Quora.com</a>.</p>

<p>For example, I wanted to understand more about machine learning and I couldn&#8217;t really ask on <a href="http://stats.stackexchange.com">stats.stackexchange.com</a>. That&#8217;s why I turned to Quora. For example, this <a href="https://www.quora.com/How-do-I-start-if-I-want-to-build-a-model-to-predict-if-a-tweet-will-go-viral/answer/Shankar-Iyer-5?__snids__=1350032536&amp;__nsrc__=2">thread</a>, I got a really detailed response from whom I can trust because of the number of upvotes.</p>

<h2>Some note</h2>

<p>I have one bad habit of just copying and pasting someone else&#8217;s code. Once you received the feedback, don&#8217;t just copy and paste that. Or if you get feedback from Github don&#8217;t just merge that right away. You will not fully understand the concept behind that. In the book I read recently, <a href="http://www.amazon.com/o/ASIN/039916524X/sciencefriday/">A Mind For Numbers</a>, Barbara taught us about how we can master in math and science and she explains that we have two modes of learning, focused and diffuse mode. If you just copy and paste someone else&#8217;s work, then you just imagine that you understand what&#8217;s going on. The best way to learn that is to actually do it and go into diffuse mode which is just close your eyes and think about it and go back to focused mode to do that again. I made a big mistake as an Engineer (I still do) that I just copy someone else&#8217;s code and I think that I understand that fully which I don&#8217;t. So, don&#8217;t just copy the feedback and commit that make sure you fully understand the code and actually type it. Barbara also suggested that writing is better than just typing but I think it might be difficult for us programmers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maps all parking signs in NYC.]]></title>
    <link href="https://www.noppanit.com/maps-all-parking-signs-in-nyc/"/>
    <updated>2015-07-30T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/maps-all-parking-signs-in-nyc</id>
    <content type="html"><![CDATA[<p>This post might be too easy for any Data-viz people but as a beginner tapping in this area. It took me quite a long time to figure it out so I just want to share this hoping that it might save people&#8217;s time.</p>

<p>Parking in NYC is really a pain, especially street parking where there&#8217;re lots of signs and regulations. There are some apps on Android and iPhone that you can download and see signs but I haven&#8217;t been able to find the one that suits my needs. I want an application that can tell me where to circle arounds on which day and time to find parking spot. For example, I parked my car on a Tuesday which has street cleaning on Wednesday and Friday from 8:30 to 9:30. That means I have to move the car on Wednesday morning to find a spot for Friday. The problem is I don&#8217;t know what&#8217;s around me. The closest application I find is <a href="http://www.nycparklife.com/streetparker/">http://www.nycparklife.com/streetparker/</a> which it doesn&#8217;t have Manhattan.</p>

<h2>Getting the data</h2>

<p>So, I googled and thank NYC.gov that provides the <a href="http://www.nyc.gov/html/dot/html/about/datafeeds.shtml#parking">data</a> for us. First, I played around with the csv files but they don&#8217;t have coordinates that I can place location on the map. And I have no experience dealing with shapefiles.</p>

<h2>Extracting the data</h2>

<p>After a few hours of mangling and munching the csv with Pandas and R. I would not be able to get the exact locations of all the signs. So I turned to shapefile hoping that I might get lucky. And I found this <a href="http://www.shpescape.com/">http://www.shpescape.com/</a> which promised to transform shapefile to <a href="https://support.google.com/fusiontables/answer/2571232?hl=en">Google Fusion Table</a>. Awesome! I went ahead and tried it. It works great! but it only gives you the first 100,000 rows. So dug deeper. After another few hours of googling I found <a href="http://www.qgis.org/en/site/">qGis</a> which is a opensource project that you can use to open and view shapefile.</p>

<p>Here&#8217;s the example.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-12.52.32.jpg" title="Parking signs on Qgis" ></p>

<p>One thing I learnt was that you cannot just click <strong>Open</strong> and choose the file. What you need to do is to <string>Add Vector Layer</strong>. You can use shortcut <strong>Ctrl+Shift+v</strong></p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-12.55.56.jpg" title="Add Vector Layer" ></p>

<h2>Export to Google Fusion</h2>

<p>Now what we need is to import what we have to Google Fusion Table. How are we going to turn this beautiful layer to Google Maps. We need CSV&#8230;</p>

<p>In QGis you can download the file as CSV. It&#8217;s in <strong>Layer > Save As</strong>. You just need to make sure that <strong>Geometry</strong> has to be set so you get the coordinates.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.02.06.jpg" title="Save to CSV" ></p>

<h2>Import to Google Fusion Table</h2>

<p>Now we can use that CSV to import to Google Fusion. It would look something like this.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.04.35.jpg" title="Google Fusion Table" ></p>

<p>what you need to make sure is that you need to specify which fields are Lat, Long so Google can plot that for you.</p>

<p>Here&#8217;s how you do it.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.05.41.jpg"></p>

<p>The click <strong>change</strong> You will see something like this and you can choose which field you want to be Longitude or Latitude.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.06.33.jpg" title="Set Location" ></p>

<p>Once the coordinates have set we can go to Map tab and see beautiful little dots that show where all the signs are in NYC.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/07/Screenshot-2015-07-30-13.07.47.jpg" title="Parking signs in Google Fusion Table" ></p>

<p>Walla! Now you have something you can build an application on top of it. The next post, I will create an application on top of this map to make use of our data.</p>

<h2>Things I have tried and failed</h2>

<p>I&#8217;ve tried using <a href="https://github.com/OSGeo/proj.4">Proj4</a> on both R and Python to convert X,Y WGS84 to Lat, Long. Here&#8217;s my little snippet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='R'><span class='line'>data <span class="o">=</span> read.csv<span class="p">(</span><span class="s">&#39;./parking_regulation.csv&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">library</span><span class="p">(</span>proj4<span class="p">)</span>
</span><span class='line'>proj4string <span class="o">&lt;-</span> <span class="s">&quot;+proj=lcc +lat_1=40.66666666666666 +lat_2=41.03333333333333 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs&quot;</span>
</span><span class='line'>latlong_list<span class="o">&lt;-</span><span class="kt">list</span><span class="p">()</span>
</span><span class='line'>calculate_long_lat <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">,</span>y<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Source data</span>
</span><span class='line'>  xy <span class="o">&lt;-</span> <span class="kt">data.frame</span><span class="p">(</span>x<span class="o">=</span>x<span class="p">,</span> y<span class="o">=</span>y<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Transformed data</span>
</span><span class='line'>  pj <span class="o">&lt;-</span> project<span class="p">(</span>xy<span class="p">,</span> proj4string<span class="p">,</span> inverse<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class='line'>  latlon <span class="o">&lt;-</span> <span class="kt">data.frame</span><span class="p">(</span>lat<span class="o">=</span>pj<span class="o">$</span>y<span class="p">,</span> lon<span class="o">=</span>pj<span class="o">$</span>x<span class="p">)</span>
</span><span class='line'>  latlong_list<span class="p">[[</span><span class="s">&#39;latlong&#39;</span><span class="p">]]</span> <span class="o">&lt;-</span> latlon
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kp">apply</span><span class="p">(</span>data<span class="p">[,</span><span class="kt">c</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span><span class="s">&#39;y&#39;</span><span class="p">)],</span> <span class="m">1</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span>y<span class="p">)</span> calculate_long_lat<span class="p">(</span>y<span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">],</span> y<span class="p">[</span><span class="s">&#39;y&#39;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is not quite accurate which I think it&#8217;s because I need to find a correct <strong>proj4string</strong>.</p>

<p>Python has the same wrapper which is quite what I want as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pyproj</span> <span class="kn">import</span> <span class="n">Proj</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;parking_regulation.csv&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">Proj</span><span class="p">(</span><span class="s">r&#39;+proj=lcc +lat_1=40.66666666666666 +lat_2=41.03333333333333 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cal_long_lat</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s">&#39;y&#39;</span><span class="p">],</span><span class="n">inverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="s">&#39;lon&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;lat&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">apply</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">cal_long_lat</span> <span class="p">(</span><span class="n">row</span><span class="p">),</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will need to learn more about State Pane and what is the correct format.</p>

<p>This article takes 2 pomodoros to complete.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I&#8217;m never going back to modern editor again.]]></title>
    <link href="https://www.noppanit.com/im-never-going-back-to-modern-editor-again/"/>
    <updated>2015-07-17T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/im-never-going-back-to-modern-editor-again</id>
    <content type="html"><![CDATA[<p>Ok, the title might be a little bit exaggerating. But let me clear this up first. I still use modern editors, TextMate, Atom.io or IntelliJ. They are pros and cons. But here&#8217;s my real answer if people ask me. I want to be the cool kid!.</p>

<p>I don&#8217;t know if you&#8217;re like me but I get asked almost all the time I go to a meetup or conference, &#8220;What&#8217;s your favourite editor&#8221;?. People almost always say Vim|Emacs. I tried both of them in the past and gave up more than I can remember because of all the shortcuts and plugins and I just get too frustrated to use either of them. Finally, I have made a decision that I&#8217;m going to stick with Vim for a month and let&#8217;s see if at the end of the month I still can&#8217;t use it. It&#8217;s been almost a month and I&#8217;d say I&#8217;m never going back to modern editors again (at least when I&#8217;m coding scripting languages). Here&#8217;s why.</p>

<h3>It&#8217;s just easier</h3>

<p>I know it&#8217;s not really easier than TextMate or Sublime. You still have to learn a lot of shortcuts and commands. Also, bare-bone Vim just doesn&#8217;t have when you get in TextMate or Sublime (e.g, Find file, Command+T, Directory structure or code completion). However, after you powered through that learning phrase everything is just natural to you.</p>

<p>If you want to clear any trailing whitespaces you just have to type <strong>%s/\s+$//</strong> and hit enter. If you want to run some external command you can always do in Vim. For example, if you just want to <strong>git status</strong> you can install <a href="https://github.com/tpope/vim-fugitive">Git wrapper</a> or you can just run <strong>:!git status</strong>. You don&#8217;t even need to go to your terminal which I think it&#8217;s faster.</p>

<p>If you&#8217;re a good engineer, you will always do TDD. Going back and fourth between the editor and terminal, it&#8217;s just too annoying. I remember when I was coding Java I can just hit Cmd+t in IntelliJ or .NET and you see green bars. Isn&#8217;t it just awesome? I realised that TextMate and Sublime have plugins to do that as well or you can just write your own plugin or package. I tried a couple of plugins and they never work for me. In Vim, it just works!.</p>

<h3>Community</h3>

<p>If Vim|Emacs doesn&#8217;t do what you want, you will almost always find the plugin that does it for you. Currently, my standard plugins are. <strong>NERDTree</strong>, <strong>CommandT</strong>, <strong>vim-fugitive</strong>, <strong>vim-rooter</strong>, <strong>vim-virtualenv</strong>. All these plugins just make my Vim functions the same as Atom.io or Sublime.</p>

<h3>Not for everyone</h3>

<p>I have to admit that the first few weeks I got really frustrated. I almost banged my keyboard against the monitor. I found myself opening Atom.io every time I couldn&#8217;t do some basic editing in Vim. For example, using <strong>vimgrep</strong> wasn&#8217;t what I expected and I ended up googling a lot. Now I get the hang of it and I don&#8217;t use Atom anymore. The worst case is I will just use command line instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to start doing TDD for jQuery plugin.]]></title>
    <link href="https://www.noppanit.com/how-to-start-doing-tdd-for-jquery-plugin/"/>
    <updated>2015-07-09T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/how-to-start-doing-tdd-for-jquery-plugin</id>
    <content type="html"><![CDATA[<p>I&#8217;m a big fan of TDD. I get nervous every time when I put some code it without having tests. I&#8217;m developing a simple jQuery plugin and I think hey we can TDD this.</p>

<h2>What is it?</h2>

<p>The plugin is really simple. It turns ul tag to be taggable field. It&#8217;s similar to <a href="http://aehlke.github.io/tag-it/">tag-it</a> but with a lot less functionalities and doesn&#8217;t depend on jquery-ui</p>

<h2>What you need</h2>

<p>I decided to use Karma because I&#8217;m going to test a lot of behaviours and Karma seems like a good fit as it run on real browser. Here&#8217;s how I setup my project.</p>

<p>I chose jasmine-jquery because it&#8217;s easier to create some element to test and it&#8217;s easy to setup.</p>

<p>This is my <strong>gulpfile.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">karma</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-karma&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">testFiles</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;tests/vendors/jquery-1.11.3.min.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;tests/vendors/jasmine-jquery.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;src/**/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;tests/spec/**/*.js&#39;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Run test once and exit</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">testFiles</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">karma</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;karma.conf.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;run&#39;</span>
</span><span class='line'>    <span class="p">}))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Make sure failed tests cause gulp to exit non-zero </span>
</span><span class='line'>    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">testFiles</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">karma</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">configFile</span><span class="o">:</span> <span class="s1">&#39;karma.conf.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;watch&#39;</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is my <strong>karma.conf.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;PhantomJS&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jasmine&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s my first test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Taggify&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fixture</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fixture</span> <span class="o">=</span> <span class="nx">setFixtures</span><span class="p">(</span><span class="s1">&#39;&lt;ul id=&quot;tag&quot;&gt;&lt;/ul&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#tag&#39;</span><span class="p">).</span><span class="nx">taggify</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should initialize text box&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will see that the test failed now we implement some code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">taggify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">create</span><span class="p">(</span><span class="nx">$theElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input class=&quot;tag-input&quot;&gt;&lt;/input&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$theElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$input</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the test passed.</p>

<p>Now let&#8217;s add some event so when you hit enter the tag is added. So, I added one more test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add a tag&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">input</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">Event</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">keyCode</span><span class="o">:</span> <span class="mi">13</span> <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tags</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.tag-label&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">tags</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">tag</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">tags</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the test failed.</p>

<p>I&#8217;ll fix the test by doing this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">taggify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">create</span><span class="p">(</span><span class="nx">$theElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input class=&quot;tag-input&quot;&gt;&lt;/input&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$input</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">tagText</span> <span class="o">=</span> <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">$span</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;tag-label&quot;&gt;&lt;/span&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$span</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">tagText</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&quot;tag-choice&quot;&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$theElement</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$span</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class='line'>        <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$theElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$input</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I want to add some negative test case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should not add a tag&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">input</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">Event</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">keyCode</span><span class="o">:</span> <span class="mi">13</span> <span class="p">}));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tags</span> <span class="o">=</span> <span class="nx">fixture</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.tag-label&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">tags</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toBeFalsy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oops the test failed, looks like I missed something</p>

<p>I will fix the test by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">taggify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">create</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">create</span><span class="p">(</span><span class="nx">$theElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input class=&quot;tag-input&quot;&gt;&lt;/input&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$input</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">tagText</span> <span class="o">=</span> <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">tagText</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">$span</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;tag-label&quot;&gt;&lt;/span&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">$span</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">tagText</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&quot;tag-choice&quot;&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$theElement</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$span</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class='line'>          <span class="nx">$input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$theElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$input</span><span class="p">.</span><span class="nx">parent</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. I hope you enjoy and love TDD more. And here&#8217;s the <a href="https://github.com/noppanit/taggify">github repo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The most basic example of Linear Regression]]></title>
    <link href="https://www.noppanit.com/the-most-basic-example-of-linear-regression/"/>
    <updated>2015-07-07T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/the-most-basic-example-of-linear-regression</id>
    <content type="html"><![CDATA[<p>Just for fun, I wanted to learn how to do linear regression and here&#8217;s the example I come up with.</p>

<p>Let&#8217;s say you have a historical data of 1000 people who dined in your restaurant and left a tip. This is going to be perfect data because I generated. In the real world you will not find something like this.</p>

<p>If you don&#8217;t understand Linear Regression like me before I wrote this post, I recommend you to read this <a href="http://onlinestatbook.com/2/regression/intro.html">basic linear regression.</a>.</p>

<p>The idea is that you have two variables. In this case, it&#8217;s <strong>tips</strong> and <strong>total amount of bill</strong>. You should explore the data by plotting the graph of these two variables. From my generated data you will get something like this.</p>

<p><img src="wp-content/uploads/2015/07/Screenshot-2015-07-07-00.54.42.jpg" title="Linear Regression" ></p>

<p>You can clearly see that there&#8217;s a strong correlation between the amount of tip and meal.</p>

<p>Now if you can find the slope of the graph and intercept you should be able to use the formula.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y = MX + C
</span><span class='line'>
</span><span class='line'>M = slope of the graph
</span><span class='line'>C = Intercept</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re lazy to look at my <a href="https://github.com/noppanit/linear-regression-basic">notebook</a>.</p>

<p>Then you can run this code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">stats</span>
</span><span class='line'>
</span><span class='line'><span class="n">total_bills</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">tips</span> <span class="o">=</span> <span class="n">total_bills</span> <span class="o">*</span> <span class="mf">0.10</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">tips</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;tips&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">total_bills</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;total_bills&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">slope</span><span class="p">,</span> <span class="n">intercept</span><span class="p">,</span> <span class="n">r_value</span><span class="p">,</span> <span class="n">p_value</span><span class="p">,</span> <span class="n">std_err</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">linregress</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">total_bills</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">tips</span><span class="p">)</span>
</span><span class='line'><span class="n">predicted_tips</span> <span class="o">=</span> <span class="p">(</span><span class="n">slope</span> <span class="o">*</span> <span class="mi">70</span><span class="p">)</span> <span class="o">+</span> <span class="n">intercept</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is $7 which corresponds to the 10% tip.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example: How did I convert async code to sync code with Promise.]]></title>
    <link href="https://www.noppanit.com/example-how-did-i-convert-async-code-to-sync-code-with-promise/"/>
    <updated>2015-05-24T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/example-how-did-i-convert-async-code-to-sync-code-with-promise</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just finished my first refactor to convert my node.js code to be more promisey (I believe that&#8217;s the word they use these days). There&#8217;s lots of documents out there to do this. However, I thought I should contribute more to help me understand more and might get some feedback from people who&#8217;s seen it as well.</p>

<p>I&#8217;m trying to create a bot to report me back the performance of my site in desktop and mobile mode. So, I thought it would be easy since Google has an <a href="https://developers.google.com/speed/docs/insights/v2/getting-started">API</a> for that already so I went ahead and did this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">urlToGetTheScore</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=desktop&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScore</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s pretty easy and straight forward right but now that would only return the score of desktop. I need the score of my mobile site as well. So, I added more code to be like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">urlToGetTheScoreDesktop</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=desktop&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">urlToGetTheScoreMobile</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=mobile&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreDesktop</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreMobile</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s great but I want to return both scores to a client so I can report the scores rather than printing them to the console. Since, <strong>request</strong> is asynchronous you cannot guarantee which score would come first. So, I thought it&#8217;s easy. I just need to call one request after the other. So, I came up with this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">urlToGetTheScoreDesktop</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=desktop&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">urlToGetTheScoreMobile</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=mobile&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreDesktop</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">desktopScore</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">urlToGetTheScoreMobile</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mobileScore</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;desktop score is &#39;</span> <span class="o">+</span> <span class="nx">desktopScore</span> <span class="o">+</span> <span class="s1">&#39; and mobile score is &#39;</span> <span class="o">+</span> <span class="nx">mobileScore</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at how ugly it is. Now I want to make it prettier. So, I will use Promise to make it look nicer. As a good engineer I need to create a test first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">perfModule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./pagespeed&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">sinon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sinon&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;expect.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Performance&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="s1">&#39;get&#39;</span><span class="p">).</span><span class="nx">yields</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">ruleGroups</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">SPEED</span><span class="o">:</span> <span class="p">{</span><span class="nx">score</span><span class="o">:</span><span class="mi">10</span><span class="p">}}</span> <span class="p">}));</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should send performance stats to chat room&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">perfModule</span><span class="p">.</span><span class="nx">pagespeed</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">donotknow</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">msg</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s1">&#39;desktop speed is 10 and mobile speed is 10&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m using <a href="http://sinonjs.org/">Sinon.js</a> as the mocking framework and <a href="http://mochajs.org/">Mocha</a> as the testing framework which are pretty standard.</p>

<p>Now I can start refactor my code. At first, I wrote some code like this, just to make it work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">getSpeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">strategy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;amp;strategy=&#39;</span><span class="o">+</span> <span class="nx">strategy</span> <span class="o">+</span> <span class="s1">&#39;&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagespeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;desktop&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">desktopSpeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;mobile&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mobileSpeed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;desktop speed is &#39;</span> <span class="o">+</span> <span class="nx">desktopSpeed</span> <span class="o">+</span> <span class="s1">&#39; and mobile speed is &#39;</span> <span class="o">+</span> <span class="nx">mobileSpeed</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">pagespeed</span> <span class="o">=</span> <span class="nx">pagespeed</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any good JavaScript developer would be like, WTH!. You still have callbacks. I thought Promise would solve that issue already! Now, I could use the power of <strong>Promise.all</strong> which takes array of promises and return array of results. My final code would look something like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;promise&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">getSpeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">strategy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http%3A%2F%2Ffusion.net&amp;amp;strategy=&#39;</span><span class="o">+</span> <span class="nx">strategy</span> <span class="o">+</span> <span class="s1">&#39;&amp;amp;fields=ruleGroups&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">ruleGroups</span><span class="p">.</span><span class="nx">SPEED</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagespeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;desktop&#39;</span><span class="p">),</span> <span class="nx">getSpeed</span><span class="p">(</span><span class="s1">&#39;mobile&#39;</span><span class="p">)]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">desktop</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mobile</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;desktop speed is &#39;</span> <span class="o">+</span> <span class="nx">desktop</span> <span class="o">+</span> <span class="s1">&#39; and mobile speed is &#39;</span> <span class="o">+</span> <span class="nx">mobile</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">pagespeed</span> <span class="o">=</span> <span class="nx">pagespeed</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m not an expert in Promise and I welcome any feedback that would help improve my code.</p>

<p>Reference<br/>
<a href="http://www.html5rocks.com/en/tutorials/es6/promises/">ES6 Promises</a><br/>
<a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html">We have a problem with promises</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rise of the (Slack)Bots.]]></title>
    <link href="https://www.noppanit.com/rise-of-the-slackbots/"/>
    <updated>2015-05-23T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/rise-of-the-slackbots</id>
    <content type="html"><![CDATA[<p><a href="http://fusion.net">Fusion</a> tech team just had a hackday in the theme of &#8220;Slackbot&#8221;. We brainstormed what or how do we make the job of editorial or engineering team easier. We threw a bunch of ideas and my team decided to create a bot that can interact with you in a number of ways or encourage you to fix or debug code. We tried to make it funny and in the same time useful for our daily routine.</p>

<p>My colleague <a href="https://twitter.com/danielbachhuber">Daniel Bachhuber</a> came up with the name Rubberduck which I believe he got it from <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging">here</a>. The idea of the bot is easy. If you have used Slack you must have seen Slackbot before where it guides you how to use Slack or the bot can help you change your profile picture.</p>

<p>We spent a good one hour to find the best possible solution for creating a bot and we found <a href="https://github.com/silentrob/superscript/">Superscript</a>, which has a client for Slack. It&#8217;s perfect!.</p>

<p>We&#8217;ve also opensourced the <a href="https://github.com/fusioneng/rubberduck-bot">bot</a> which you can clone and play around with it as well.</p>

<p>The first plugin we are thinking is performance bot where the bot can report the current performance of a website instead of going to a dashboard. It&#8217;s because we have remote team. So, having a bit giant board wouldn&#8217;t make much sense since some of our folks are distributed and we mainly use Slack for any communication.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/05/Screenshot-2015-05-23-19.42.23.jpg" title="rubberduck bot" ></p>

<p>Now, go ahead and create your own bot!.</p>

<p>&nbsp;</p>

<p>Check this out. <a href="https://medium.com/@rob_ellis/slack-superscript-rise-of-the-bots-bba8506a043c">Rise of the bots</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing SSL on Amazon CloudFront]]></title>
    <link href="https://www.noppanit.com/installing-ssl-on-amazon-cloudfront/"/>
    <updated>2015-05-22T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/installing-ssl-on-amazon-cloudfront</id>
    <content type="html"><![CDATA[<p>We have just installed SSL on our Amazon CloudFront. We followed this <a href="https://bryce.fisher-fleig.org/blog/setting-up-ssl-on-aws-cloudfront-and-s3/">blog post</a> from Bryce which I think it&#8217;s really good already. However, I was stuck on the last part where you have to upload the certificate to IAM. The difference is that I had to concatenate the crt files myself and I didn&#8217;t know how to do it. So I spent quite a long time to figure it out. I thought I would write this so it might help save sometime for anybody.</p>

<p>If your SSL providers gave you the chained certificate already, then you don&#8217;t have to do anything else. However, when I downloaded my crt files I found this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my_domain.crt
</span><span class='line'>AddTrustExternalCARoot.crt
</span><span class='line'>TrustedSecureCertificateAuthority5.crt
</span><span class='line'>USERTrustRSAAddTrustCA.rt</span></code></pre></td></tr></table></div></figure>


<p>And I&#8217;m shocked. So, I thought I would need to upload all of them three times which I did but only one got through and I thought the others must have been backup or some kind (I know I&#8217;m pretty stupid). So, I used <a href="https://www.digicert.com/help/">SSL Checker</a> to check and the site said my trust is broken. I thought how could it be I did everything right.</p>

<p>It turned out that I didn&#8217;t upload all of the chained certificate. So, I went again and I tried to upload the second file which I got a nice error from Amazon that my certificate is malformed. I&#8217;m stumped again.</p>

<p>After a lot of digging and reading. I have to figured out the order of certificates and concatenate all the certificates in the right order until the root. You can ask your SSL provider if you want a quicker answer but I went the hard way.</p>

<p>You can run this command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl x509 -text -noout -in your_domain.crt
</span></code></pre></td></tr></table></div></figure>


<p>You should start with your <strong>domain.crt</strong> file which will be something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>
</span><span class='line'>        Serial Number:
</span><span class='line'>            xxxxxx
</span><span class='line'>        Signature Algorithm: xxxxx
</span><span class='line'>        Issuer: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>DE, <span class="nv">L</span><span class="o">=</span>Wilmington, <span class="nv">O</span><span class="o">=</span>Corporation Service Company, <span class="nv">CN</span><span class="o">=</span>Trusted Secure Certificate Authority 5
</span><span class='line'>        Validity
</span><span class='line'>            Not Before:
</span><span class='line'>            Not After :
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US/postalCode<span class="o">=</span>x, <span class="nv">ST</span><span class="o">=</span>xx, <span class="nv">L</span><span class="o">=</span>xxx, <span class="nv">O</span><span class="o">=</span>xxx, LLC, <span class="nv">OU</span><span class="o">=</span>xxx, <span class="nv">OU</span><span class="o">=</span>xxx, <span class="nv">CN</span><span class="o">=</span>xxx
</span></code></pre></td></tr></table></div></figure>


<p>You just need to look for Issuer which will tell you what is your next immediate certificate. In this case Trusted Secure Certificate Authority 5 is my first certificate and then you go on and do the next one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl x509 -text -noout -in TrustedSecureCertificateAuthority5.crt
</span></code></pre></td></tr></table></div></figure>


<p>You will get something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>
</span><span class='line'>        Serial Number:
</span><span class='line'>            xxxxx
</span><span class='line'>        Signature Algorithm: xxxx
</span><span class='line'>        Issuer: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>New Jersey, <span class="nv">L</span><span class="o">=</span>Jersey City, <span class="nv">O</span><span class="o">=</span>The USERTRUST Network, <span class="nv">CN</span><span class="o">=</span>USERTrust RSA Certification Authority
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Sep <span class="m">10</span> 00:00:00 <span class="m">2014</span> GMT
</span><span class='line'>            Not After : Sep  <span class="m">9</span> 23:59:59 <span class="m">2024</span> GMT
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">ST</span><span class="o">=</span>DE, <span class="nv">L</span><span class="o">=</span>Wilmington, <span class="nv">O</span><span class="o">=</span>Corporation Service Company, <span class="nv">CN</span><span class="o">=</span>Trusted Secure Certificate Authority 5
</span></code></pre></td></tr></table></div></figure>


<p>It means <strong>USERTrust</strong> is the next certificate then repeat the process again until you see this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>
</span><span class='line'>        Serial Number: xxxx
</span><span class='line'>        Signature Algorithm: xxxxx
</span><span class='line'>        Issuer: <span class="nv">C</span><span class="o">=</span>SE, <span class="nv">O</span><span class="o">=</span>AddTrust AB, <span class="nv">OU</span><span class="o">=</span>AddTrust External TTP Network, <span class="nv">CN</span><span class="o">=</span>AddTrust External CA Root
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: May <span class="m">30</span> 10:48:38 <span class="m">2000</span> GMT
</span><span class='line'>            Not After : May <span class="m">30</span> 10:48:38 <span class="m">2020</span> GMT
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>SE, <span class="nv">O</span><span class="o">=</span>AddTrust AB, <span class="nv">OU</span><span class="o">=</span>AddTrust External TTP Network, <span class="nv">CN</span><span class="o">=</span>AddTrust External CA Root
</span></code></pre></td></tr></table></div></figure>


<p>If <strong>Issuer</strong> is the same as <strong>Subject</strong> that means this certificate is the root which is going to be the last. Now, what you can do is to concatenate in the correct order of all the certificates.</p>

<p>You can use this command or you can use your favourite editor to do as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat first_crt second_crt third_crt &gt; your_pem_file
</span></code></pre></td></tr></table></div></figure>


<p>Then when you&#8217;re ready to upload the certificate to Amazon you can just do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws iam upload-server-certificate --server-certificate-name your_domain <span class="se">\</span>
</span><span class='line'>--certificate-body file://your_domain.crt <span class="se">\</span>
</span><span class='line'>--private-key file://your_domain.private <span class="se">\</span>
</span><span class='line'>--certificate-chain file://your_pem_file <span class="se">\</span>
</span><span class='line'>--path /cloudfront/
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>&#8211;certificate-chain</strong> should be your concatenated certificates.</p>

<p>The format of the <strong>pem</strong> should be something like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>Intermediate certificate 2
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>Intermediate certificate 1
</span><span class='line'>-----END CERTIFICATE-----
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What should you expect for Salkantay trek to Machu Picchu]]></title>
    <link href="https://www.noppanit.com/what-should-you-expect-for-salkantay-trek-to-machu-picchu/"/>
    <updated>2015-05-18T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/what-should-you-expect-for-salkantay-trek-to-machu-picchu</id>
    <content type="html"><![CDATA[<p>I&#8217;m not really a travel blogger but I&#8217;ll try to share my experience as much as possible. I&#8217;ve just come back from Peru (Machu Picchu). Me and a bunch of my friends did the Salkantay trek which hike from Cusco (sort of) to Machu Picchu. It&#8217;s a 5 days 4 nights trip. The hike is really challenging physically and mentally. You will experience altitude sickness and soreness from your body. Funny thing is I didn&#8217;t feel a thing at the highest peak, some of my friends experienced different symptoms. One of the best I&#8217;ve heard is; &#8220;It&#8217;s like EDM concert banging in my head&#8221;.</p>

<h2>Stay warm</h2>

<p>You really need to dress warm because you will be walking at the altitude around 14,000 feet which is going to be quite cold. I&#8217;d suggest a lot of layers instead of big puffy jacket. Base layer is really important and a good fleece. One thing that you can&#8217;t miss out is a good pair of wool socks.</p>

<h2>Prepare for the rain</h2>

<p>It&#8217;s going to rain. What you really need is a good rain jacket and or Pancho is you want. I find rain jacket is enough to keep you dry. However, what really important is waterproof hiking shoes or you need extra pairs of socks. If you have your camera, rain cover for your bag and camera are really crucial.</p>

<h2>Prepare for the altitude</h2>

<p>If you think you will be affected by the altitude, please consult with your doctor to get some pills. I didn&#8217;t really get any headache while hiking on the high altitude but everybody is different.</p>

<h2>What you don&#8217;t really need</h2>

<p>Water is what you really need. But you can get water at every stop along the trail. What you don&#8217;t really need is water purification. However, it&#8217;s just a small pack if you don&#8217;t mind carrying that.</p>

<h2>Pack light</h2>

<p>I found myself overpack for the hike and I exhausted myself on the third day. If you think you&#8217;re going to need snacks. I suggest having <a href="http://www.starburst.com/">starburst</a>. My friend gave away two starbursts at every stop point which I think they really keep me going in terms of energy. I had my raw almonds and dry berries which helped a lot.</p>

<h2>Sleep comfy</h2>

<p>Sleeping bag is a must. However, I had a really good night sleep with my <a href="http://www.rei.com/product/866771/sea-to-summit-aeros-pillow-premium">camping pillow</a> and it&#8217;s inflatable and really light.</p>

<h2>Taking pictures of the locals</h2>

<p>If you walk around in Cusco, you might find local people dressing in traditional custom. If you take a picture of them, they might ask you for some money. I gave them 1 soles and it was enough. And make sure you ask their permission before you take a picture of them.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/pinkcarnation/17626431306/in/dateposted-ff/" title="Peru-1093710.jpg"><img src="https://farm9.staticflickr.com/8837/17626431306_853767fc9e_z.jpg" width="640" height="423" alt="Peru-1093710.jpg"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Coca leaves</h2>

<p>The locals told us to chew coca leaves to prevent the tiredness and altitude sickness. To be honest, they didn&#8217;t help much but I really like the coca tea in the morning.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/pinkcarnation/17465382290/in/dateposted-ff/" title="Peru-1093841.jpg"><img src="https://farm8.staticflickr.com/7770/17465382290_7dfcc888d1_z.jpg" width="640" height="431" alt="Peru-1093841.jpg"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Local food</h2>

<p>Peruvian cuisine is really interesting or at least from my point of view. I had Guinea pig and Alpaca. I like Alpaca but the Guinea pig is not really my jam. At least I tried.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/pinkcarnation/17627373766/in/dateposted-ff/" title="Peru-1094221.jpg"><img src="https://farm6.staticflickr.com/5441/17627373766_e4568e063a_z.jpg" width="640" height="444" alt="Peru-1094221.jpg"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Machu Picchu</h2>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/pinkcarnation/17653773851/in/dateposted-ff/" title="Peru-1094213.jpg"><img src="https://farm9.staticflickr.com/8707/17653773851_aa6c40a15e_z.jpg" width="640" height="431" alt="Peru-1094213.jpg"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Good view from your tent</h2>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/pinkcarnation/17653136981/in/dateposted-ff/" title="Peru-1093869.jpg"><img src="https://farm8.staticflickr.com/7656/17653136981_03874afb08_z.jpg" width="640" height="431" alt="Peru-1093869.jpg"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stop repainting your sticky bar on scroll?]]></title>
    <link href="https://www.noppanit.com/how-to-stop-repainting-your-sticky-bar-on-scroll/"/>
    <updated>2015-04-14T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/how-to-stop-repainting-your-sticky-bar-on-scroll</id>
    <content type="html"><![CDATA[<p>Everybody loves sticky bar. Or I should say every UX loves sticky bar. You probable have seen that from almost all major websites. Twitter or Facebook all has the top nav bar which sticks to the top and follows you when you scroll down the page. However, there&#8217;s one thing that I have noticed if you use Google Chrome Dev Tool to see the paint area. You will see that the nav bar gets repaint every time you scroll up and down.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/04/Screenshot_2015-04-14_01_13_55.png"></p>

<p>Also, if you use Timeline to record the activity you will notice a lot of Repaint happening which leads to bad scrolling performance.</p>

<p>The easy fix would be to put</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">backface-visibility</span><span class="o">:</span> <span class="nt">hidden</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>on your navbar which will stop the repaint on scroll.</p>

<h3>Why that fixes it?</h3>

<p>I don&#8217;t want to try answer this myself as this <a href="http://benfrain.com/improving-css-performance-fixed-position-elements/">article</a> answers everything.</p>

<h3>Try it yourself</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;style&gt;</span>
</span><span class='line'>  <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>      <span class="k">margin-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">font-size</span><span class="o">:</span> <span class="m">24px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">nav</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">background-color</span><span class="o">:</span> <span class="nb">gray</span><span class="p">;</span>
</span><span class='line'>      <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;nav&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>Menu1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>Menu2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>Menu3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>Menu4<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/nav&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">backface-visibility</span><span class="o">:</span> <span class="nt">hidden</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>to the navbar and you can measure the performance by using Timeline again you will notice the difference.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2015/04/Screenshot-2015-04-14-01.20.04.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You should check in your dependencies.]]></title>
    <link href="https://www.noppanit.com/you-should-check-in-your-dependencies/"/>
    <updated>2015-03-28T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/you-should-check-in-your-dependencies</id>
    <content type="html"><![CDATA[<p>I&#8217;m not sure who started this pattern so I can&#8217;t really refer back but if you know please comment below and I will update the post. I&#8217;m sure all of you have heard that you should not check in anything that can be generated to Source control. It&#8217;s long been a common pattern. However, lately I have been checking in my dependencies into my source control and it works really well for small to medium project. Here&#8217;s why.</p>

<h3>Isolate you from any network failures.</h3>

<p>I know you might say that it rarely happens to me so why should I care about this. I hear you. It rarely happens to me as well but when it did happen I got really frustrated. Especially, when your CI failed without any reason and you found out that one of your dependencies doesn&#8217;t get downloaded properly.</p>

<h3>CI failure</h3>

<p>This frustrates me the most and it&#8217;s one of the reasons why I started doing this. More than often that my CI failed and it&#8217;s because of dependencies didn&#8217;t get resolved or compiled properly and people just kept running it over and over again. To eliminate this problem and let CI just run the tests save me a lot of pulling my hair time.</p>

<h3>Check out and Go!</h3>

<p>This pattern I have learnt while I was working with ThoughtWorks that it&#8217;s so frustrated when you are joining a project and you spend almost half a day just to get your machine up and running and run the build script to download all the dependencies. I believed that&#8217;s one of the reasons why Chef and Puppet exist. It&#8217;s so easy when you checkout a project from your source control and you can start coding right away or even run all the tests.</p>

<p>I also have this support from my <a href="http://scottmuc.com/" title="Scott Muc">friend</a></p>

<blockquote class="twitter-tweet" lang="en">
  <p>
    <a href="https://twitter.com/noppanit">@noppanit</a> I've been a fan of that technique for a long time now.
  </p>
  
  <p>
    &mdash; Scott Myц (@ScottMuc) <a href="https://twitter.com/ScottMuc/status/579739745921724416">March 22, 2015</a>
  </p>
</blockquote>


<p>Srini also pointed out that you shouldn&#8217;t do that for internal project dependencies</p>

<blockquote class="twitter-tweet" lang="en">
  <p>
    <a href="https://twitter.com/ScottMuc">@ScottMuc</a> <a href="https://twitter.com/noppanit">@noppanit</a> agree. It's good for external libraries and toolset libraries. Not good for internal project dependencies.
  </p>
  
  <p>
    &mdash; Srinivasan Raguraman (@sragu) <a href="https://twitter.com/sragu/status/579762369041186816">March 22, 2015</a>
  </p>
</blockquote>


<h3>Conclusion</h3>

<p>I know people might argue that it doesn&#8217;t really work for big project because of the size of the repository. That&#8217;s why I mention small to medium project. It works really well with small projects. Another point to mention is that every developer might have different environment for example, Windows VS Linux which node_modules might not work for both environments. I solve that problem by using Vagrant so everybody has the same environment.</p>

<p>Inspiration<br/>
<a href="https://www.dzombak.com/blog/2014/03/including-pods-in-source-control.html">https://www.dzombak.com/blog/2014/03/including-pods-in-source-control.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 2015]]></title>
    <link href="https://www.noppanit.com/2015/"/>
    <updated>2015-02-05T00:00:00-05:00</updated>
    <id>https://www.noppanit.com/2015</id>
    <content type="html"><![CDATA[<p>I just want to take a break from writing about technical posts to just talk about myself a little bit. I&#8217;m inspired by Scott Muc&#8217;s <a href="http://scottmuc.com/my-resolutions-for-2015/" title="Scott's 2015 Resolution">post</a> about his 2015 Resolutions. Before getting into 2015 I want to take a step back and review my 2014</p>

<h2>My 2014</h2>

<ul>
<li>I got the opportunity to work in Turkey as part of my consulting job with <a href="http://www.thoughtworks.com/" title="ThougthWorks">ThoughtWorks</a>. I can count Turkey to be my 6th country I have lived and worked in. I used to work and live in Thailand, China, India, United Kingdom, Germany, Turkey.</li>
<li>Learned C#. C# is the first language I learnt at school when Windows Form was a big thing. I loved it but then the web took over and I felt in love with Java instead and never look back. The project in Turkey is C# so I got to relearn that again and I can say that I like it more than Java now. The language is nicer and more functional. I can do more stuff with less code.</li>
<li>Moved to the US.</li>
</ul>


<h2>My 2015</h2>

<h3>Move to the US and join Fusion</h3>

<p>I decided to join <a href="http://fusion.net">Fusion</a> and left my glamorous consulting job. Partly because of the city. I felt in love with New York City when I was there in 2013 for a conference and I thought it would be nice to live here. When the opportunity came I took it immediately. Now two months passed by and I still love the city and my job. Much to explore and lots of places to travel in the US. Fusion is also the first place I get to know what&#8217;s like to work remotely. I absolutely love it. I get to be anywhere and also do what I love which is coding. I will write another post about remote collaboration later. Fusion is a media company which is a new field that I haven&#8217;t explored before.</p>

<h3>Join Kollaboration</h3>

<p>I join <a href="http://www.kollaborationnewyork.org" title="Kollaboration New York">Kollaboration</a> New York as a Technical Director because of my roommate <a href="https://www.linkedin.com/in/tannerchung" title="Tanner Chung">Tanner Chung</a>. Kollaboration is a non-profit organization that help and promote Asian American artists through entertainment. In this organization, I get to learn what&#8217;s like to be Asian American. I&#8217;m asian myself but I was born in Asia. So, I didn&#8217;t know the problems a lot of asian people living abroad having.</p>

<h2>What I want to do in 2015</h2>

<h3>Learn to invest</h3>

<p>Who doesn&#8217;t want to have money? I&#8217;m going to learn how to invest my saving and will keep posting the results.</p>

<h3>Travel across America</h3>

<p>When I was living in Europe, you can get to a lot of countries in just 2-3 hours but in America everywhere is so big and South American has always been my dream location.</p>

<h3>Learn Spanish</h3>

<p>My previous goal leads to this goal. I speak Thai, English and Mandarin. I learnt German before but didn&#8217;t really get anywhere. This year I&#8217;m going to learn Spanish and make it my fourth language. I love languages and it&#8217;s fun to talk to the locals and amazed them with their language.</p>

<h3>Run a marathon</h3>

<p>My friend Rajveer and <a href="https://twitter.com/sragu">Srini</a> inspire me to running. I&#8217;m a chubby guy and I really want to get into shape. Running a marathon takes a lot out of you mentally and physically. I thought if I could do it at least for once, I&#8217;d accomplish something.</p>

<h2>Summary</h2>

<p>I started off 2015 pretty good. I went to India for my friend&#8217;s wedding in Rajasthan. I went to US west coast to experience super cold whether. I learned PHP and WordPress and improved my JavaScript skills which I will continue doing that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event delegation in JavaScript is fast but how fast?]]></title>
    <link href="https://www.noppanit.com/event-delegation-javascript-fast-fast/"/>
    <updated>2014-11-22T00:00:00-05:00</updated>
    <id>https://www.noppanit.com/event-delegation-javascript-fast-fast</id>
    <content type="html"><![CDATA[<p>People say always use event delegation for adding event because it&#8217;s faster. But how fast exactly? I really want to create a test case for this, but I couldn&#8217;t figure out how to run B<a href="http://benchmarkjs.com/" title="benchmark.js">enchmark.js</a> in browser. So, I thought we could just use Chrome Developer Tool to achieve this.</p>

<h2>What are we measuring?</h2>

<p>As I said in the beginning, we want to know how fast event delegation is compared to direct binding that most people do. For example, I&#8217;ve always seen people do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#ul li&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// doing something amazing.</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is actually doing is, jQuery will add the event to each of the <strong>li</strong> in the DOM. If you have 3-4 lis, then I don&#8217;t think it&#8217;s going to make a big difference. However, if you have a thousand lis, you will see some difference. I&#8217;ll show you by using Chrome Developer Tool.</p>

<h2>What do we need?</h2>

<p>We need some basic HTML</p>

<p>It&#8217;s going to be something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;/li&gt;</span>
</span><span class='line'>  // 999 more <span class="nt">&lt;li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we will have JavaScript like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#parent li&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;you clicked me!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you open your html page on Chrome you should see something like this.<br/>
<img src="https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.06.19-PM.png"></p>

<p>If you go down to where JavaScript is executed You will see it takes around <strong>37ms</strong> to execute the snippet.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.07.18-PM.png"></p>

<p>Now change your snippet to be event delegation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#parent&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;you clicked me!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And refresh the page you should see something like this.</p>

<p><img src="https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.12.02-PM.png"></p>

<p>Now it will only take <strong>2ms</strong> to execute the snippet. It&#8217;s because the event is added to one element not 1000 of them.</p>

<p>This is just an easy example that you can do it yourself to improve your performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create a simple vagrant plugin.]]></title>
    <link href="https://www.noppanit.com/create-simple-vagrant-plugin/"/>
    <updated>2014-11-21T00:00:00-05:00</updated>
    <id>https://www.noppanit.com/create-simple-vagrant-plugin</id>
    <content type="html"><![CDATA[<p>I have been searching all over the Internet to find how to create a vagrant plugin. <a href="https://docs.vagrantup.com/v2/plugins/index.html" title="vagrant plugin">Vagrant homepage</a> has information on how to create a vagrant plugin, but I would like to give a real world example. The plugin I&#8217;m going to create is <strong><a href="https://github.com/noppanit/vagrant-ls" title="vagrant-ls">vagrant-ls</a></strong> which is inspired by <strong><a href="https://github.com/joshmcarthur/vagrant-list" title="vagrant-list">vagrant-list</a></strong>.</p>

<h2>How do you start</h2>

<p>Vagrant that you installed already won&#8217;t work with local developing plugin. So, I recommend you to create a new gemset for your plugin. If you haven&#8217;t used <a href="http://rvm.io/" title="rvm">RVM</a>, I highly recommend you use it now. It&#8217;s awesome!.</p>

<p>Once you have RVM installed you can create a gemset using this command <strong>rvm gemset create vagrant-ls</strong>. Then <strong>rvm gemset use vagrant-ls</strong> (Just in case). I recommend you do this for each of your ruby project. It helps you separate your gems, and it won&#8217;t mess up with different versions of your gems. First thing that you have to install is Bundler <strong>gem install bundler</strong>. It&#8217;s because we will use Bundler to manage all of our dependencies. Then you can create <strong>Gemfile</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;vagrant&quot;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s2">&quot;https://github.com/mitchellh/vagrant.git&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:plugins</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;vagrant-ls&quot;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the most basic you would need for your plugin development. If you wonder what is <em>group :plugins</em>
. <a href="https://docs.vagrantup.com/v2/plugins/development-basics.html">Vagrant plugin</a> has already explained that. This will load your local plugin automatically without doing <em>bundle exec vagrant install plugin vagrant-ls</em> which will not quite work anyway.</p>

<p>Then you can create your gemspec file. I name it <strong>vagrant-ls.gemspec</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib/vagrant-ls/version&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>            <span class="o">=</span> <span class="s1">&#39;vagrant-ls&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>         <span class="o">=</span> <span class="no">Vagrant</span><span class="o">::</span><span class="no">Ls</span><span class="o">::</span><span class="no">VERSION</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">date</span>            <span class="o">=</span> <span class="s1">&#39;2014-11-18&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>         <span class="o">=</span> <span class="s2">&quot;List all vms&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">description</span>     <span class="o">=</span> <span class="s2">&quot;A simple vagrant plugin for listing all vms&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">authors</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Noppanit Charassinvichai&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">email</span>           <span class="o">=</span> <span class="s1">&#39;noppanit.c@gmail.com&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">files</span>           <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="vg">$\</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">executables</span>     <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^bin/}</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">require_paths</span>   <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;lib&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">homepage</span>        <span class="o">=</span> <span class="s1">&#39;https://github.com/noppanit/vagrant-ls&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">license</span>         <span class="o">=</span> <span class="s1">&#39;GNU&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you crate <strong>Rakefile</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">::</span><span class="no">GemHelper</span><span class="o">.</span><span class="n">install_tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you move on to create your plugin using this <a href="http://guides.rubygems.org/patterns/" title="gem pattern">pattern</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/vagrant-ls.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;vagrant&#39;</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="ss">:development</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;vagrant-ls/plugin&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;vagrant-ls/command&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I almost forget you need to create VERSION file for gemspec to get your version number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/vagrant-ls/version.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Vagrant</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Ls</span>
</span><span class='line'>        <span class="no">VERSION</span> <span class="o">=</span> <span class="s1">&#39;0.0.1&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you create your plugin class, this will be the place where vagrant finds information about your plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/vagrant-ls/plugin.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Vagrant</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Ls</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Plugin</span> <span class="o">&lt;</span> <span class="no">Vagrant</span><span class="o">.</span><span class="n">plugin</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="nb">name</span> <span class="s2">&quot;List&quot;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">description</span> <span class="o">&lt;&lt;-</span><span class="no">DESC</span>
</span><span class='line'><span class="sh">          This plugin &#39;ls&#39; all of the vms running inside the machine</span>
</span><span class='line'><span class="no">          DESC</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">command</span> <span class="s1">&#39;ls&#39;</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">require_relative</span> <span class="s1">&#39;command&#39;</span>
</span><span class='line'>            <span class="no">Command</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where you will name your command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">command</span> <span class="s1">&#39;ls&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last one, this is where vagrant will know how to execute your plugin</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/vagrant-ls/command.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Vagrant</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Ls</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Command</span> <span class="o">&lt;</span> <span class="no">Vagrant</span><span class="o">.</span><span class="n">plugin</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="ss">:command</span><span class="p">)</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>                <span class="nb">exec</span><span class="p">(</span><span class="s1">&#39;VBoxManage list vms&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="mi">0</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I just run <strong>VBoxManage</strong> command to list all of the vms. Once you are done, you are ready to test your plugin.</p>

<p>You can run this command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>vagrant ls
</span></code></pre></td></tr></table></div></figure>


<p>. If everything is correct, it should list all of your vms with the name of your vms, so you know where you are you running all those vms.</p>

<h2>Publish your gem</h2>

<p>Now, it&#8217;s time to spread the love of your gem. You need to build your gem first. Remember the Rakefile? You can just run <em>rake build</em></p>

<p>It will pack your gem to <strong>.pkg</strong> folder. Then you can just run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem push pkg/vagrant-ls-0.0.1.gem
</span></code></pre></td></tr></table></div></figure>


<p>. That&#8217;s it you have your gem published. If you look for <a href="http://guides.rubygems.org/publishing/">documentation</a> for publishing your gem.</p>

<p>You can find my repository <a href="https://github.com/noppanit/vagrant-ls">here</a>. The reason I create this post is that, the plugin might evolve but this blog stays and it will be a good starting point for other people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter is a good tool for customer support if used carefully.]]></title>
    <link href="https://www.noppanit.com/twitter-good-tool-customer-support-used-carefully/"/>
    <updated>2014-10-07T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/twitter-good-tool-customer-support-used-carefully</id>
    <content type="html"><![CDATA[<p>I recently moved to NYC and I just got a pre-paid T-Mobile just to try it out how it goes. And this is what I tweeted and got a reply back from T-Mobile.</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">After just one week of <a href="https://twitter.com/TMobile">@TMobile</a> in NYC. I&#39;m not quite impressed with the coverage. <a href="https://twitter.com/hashtag/hmm?src=hash">#hmm</a></p>&mdash; Noppanit (Toy) (@noppanit) <a href="https://twitter.com/noppanit/status/519437198610137088">October 7, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I think they might have got hundred of tweets a day. So they might have slipped. The first when I read this I quickly scrolled up to see if I got a typo. But they&#8217;re right though I chose T-Mobile. Just a little laugh for me today.</p>
]]></content>
  </entry>
  
</feed>

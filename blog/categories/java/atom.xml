<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | My Blog]]></title>
  <link href="http://noppanit.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://noppanit.github.io/"/>
  <updated>2015-10-01T21:51:48-04:00</updated>
  <id>http://noppanit.github.io/</id>
  <author>
    <name><![CDATA[Noppanit Charassinvichai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thinking Functionally for Idiots.]]></title>
    <link href="http://noppanit.github.io/thinking-functionally-for-idiots/"/>
    <updated>2014-01-20T00:00:00-05:00</updated>
    <id>http://noppanit.github.io/thinking-functionally-for-idiots</id>
    <content type="html"><![CDATA[<p>I just want to write this post for myself and lucky people who found this post from Google. The world has come to the era of functional. When I pair with my colleagues I always hear &#8220;That&#8217;s not so functional&#8221; or &#8220;Should we use Guava or functional Java&#8221; or &#8220;Wouldn&#8217;t it be easier if we use Scala&#8221;?. What do these mean? Why should I have to care if my code looks functional and what benefits do I get. This post is going to be a really easy post to follow that&#8217;s why the title &#8220;Thinking functionally for idiots&#8221;. If you want more technical I highly recommend this <a href="http://www.ibm.com/developerworks/java/library/j-ft1/index.html" title="Thinking functionally Part I">post</a> from Neal Ford.</p>

<p><strong>Why functional programming?</strong><br/>
There are a few concepts of functional programming but you can find the full concepts <a href="https://en.wikipedia.org/wiki/Functional_programming#Concepts">here</a>. I don&#8217;t really want to explain about higher-order or first-class functions because someone else can explain it better than myself. In summary, I really think the benefits of doing functional programming is you tend to avoid bugs and the code might be more readable. These can be achieved by avoiding state and mutable data which most of the sites seem to refer to these two benefits. I would like to show this in a simple example.</p>

<div class="codecolorer-container java blackboard" style="overflow:auto;white-space:nowrap;width:100%;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />3<br />4<br />5<br />6<br />7<br />
        </div>
      </td>
      
      <td>
        <div class="java codecolorer">
          &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0"><</span>Integer<span class="sy0">></span> numbers <span class="sy0">=</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Aarrays+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Arrays</span></a>.<span class="me1">asList</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">2</span> ,<span class="nu0">3</span>, <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; ArrayList<span class="sy0"><</span>Integer<span class="sy0">></span> multipledByTwo <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0"><</span>Integer<span class="sy0">></span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Ainteger+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Integer</span></a> number <span class="sy0">:</span> numbers<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; multipledByTwo.<span class="me1">add</span><span class="br0">&#40;</span>number <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
        </div>
      </td>
    </tr>
  </table>
</div>


<p>You can see that this piece of code is really simple and what it&#8217;s doing is just multiply every element of the list by two. What&#8217;s wrong with this piece of code? First of all, <strong>multipledByTwo</strong> list acts like a temporary list which holds the answer and programmer can do something else with it.</p>

<p>Let&#8217;s see another example. This is the modified version to be more functional.</p>

<div class="codecolorer-container java blackboard" style="overflow:auto;white-space:nowrap;width:100%;height:400px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />
        </div>
      </td>
      
      <td>
        <div class="java codecolorer">
          <span class="co1">// Interface</span><br /> <span class="kw1">public</span> <span class="kw1">interface</span> Function<span class="sy0"><</span>S, T<span class="sy0">></span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; T apply<span class="br0">&#40;</span>S in<span class="br0">&#41;</span><span class="sy0">;</span><br /> <span class="br0">&#125;</span><br /> <br /> <span class="co1">// MappingClass</span><br /> <span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw1">class</span> MappingClass<span class="sy0"><</span>S, T<span class="sy0">></span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; <span class="kw1">protected</span> List<span class="sy0"><</span>T<span class="sy0">></span> map<span class="br0">&#40;</span>List<span class="sy0"><</span>S<span class="sy0">></span> list, Function<span class="sy0"><</span>S, T<span class="sy0">></span> fun<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0"><</span>T<span class="sy0">></span> result <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0"><</span>T<span class="sy0">></span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span>S item <span class="sy0">:</span> list<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">add</span><span class="br0">&#40;</span>fun.<span class="me1">apply</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <span class="br0">&#125;</span><br /> <br /> <span class="co1">// To Test</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> List<span class="sy0"><</span>Integer<span class="sy0">></span> test<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0"><</span>Integer<span class="sy0">></span> numbers <span class="sy0">=</span> asList<span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0"><</span>Integer<span class="sy0">></span> results <span class="sy0">=</span> map<span class="br0">&#40;</span>numbers, <span class="kw1">new</span> Function<span class="sy0"><</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Ainteger+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Integer</span></a>, Integer<span class="sy0">></span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Override<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Ainteger+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Integer</span></a> apply<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Ainteger+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Integer</span></a> input<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> input <span class="sy0">*</span> <span class="nu0">2</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> results<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span>
        </div>
      </td>
    </tr>
  </table>
</div>


<p>We create one generic function which is the interface <strong>Function</strong> this will represent higher-order function which we can parse to another method. Then we create a recursive method which will execute the function and put in another list. This way we don&#8217;t create mutable object and we don&#8217;t retain any state. What comes in the function comes out as the results.</p>

<p>What do you think? Is this better than the other? If it&#8217;s Java I highly doubt that. Java is still not mature enough to do functional programming. But things are looking better in Java 8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson Learnt : Basic Java Memory Consumption for In-memory Cache.]]></title>
    <link href="http://noppanit.github.io/lesson-learnt-basic-java-memory-consumption-memory-cache/"/>
    <updated>2013-12-05T00:00:00-05:00</updated>
    <id>http://noppanit.github.io/lesson-learnt-basic-java-memory-consumption-memory-cache</id>
    <content type="html"><![CDATA[<p>I know that these days we&#8217;re in the era of cheap memory. You can pretty much get 8GB of memory on a Notebook off the shelf. I can still remember in the past when I was playing with my 486DX with 64Mb or memory and it was too fast! yeah. People might question what am I doing using a lot of memory and why would you care. In my case, I&#8217;m building a cache which I have to pretty much hold every single object inside the memory. I have over 1 million objects. Well it&#8217;s just 1 million objects which it&#8217;s not a big deal but I have to index and make it searchable which I was told to use hibernate search. Hiberate search is pretty much a wrapper on top of Lucene. That&#8217;s why my my cache it&#8217;s very memory consuming. So, I have to be very careful what I put in my domain object. The example I&#8217;m using it&#8217;s just a basic example which in the real project there will be much more than just this.</p>

<p>For example, I have one <strong>Store</strong> object which it has a method to return jsonified string. So, what I did I just passed <strong>ObjectMapper</strong> to transform my object to be json. However, what I didn&#8217;t realise was that if I passed that from the constructor my object has to store <strong>ObjectMapper</strong> inside the object as well and <strong>ObjectMapper</strong> is a really beefy object. So, If I created a million objects I have to hold another million objects of ObjectMapper as well. So, I just had to pass <strong>ObjectMapper</strong> just when I want to use it. And that save me a lot of memory.</p>

<div class="codecolorer-container java blackboard" style="overflow:auto;white-space:nowrap;width:100%;height:400px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br />56<br />57<br />58<br />59<br />60<br />61<br />62<br />63<br />64<br />65<br />66<br />67<br />68<br />69<br />70<br />71<br />72<br />73<br />74<br />75<br />76<br />77<br />78<br />79<br />80<br />81<br />82<br />83<br />84<br />85<br />86<br />87<br />88<br />89<br />90<br />91<br />92<br />93<br />94<br />95<br />96<br />97<br />98<br />99<br />100<br />101<br />102<br />
        </div>
      </td>
      
      <td>
        <div class="java codecolorer">
          <span class="kw1">package</span> <span class="co2">com.noppanit</span><span class="sy0">;</span><br /> <br /> <span class="kw1">import</span> <span class="co2">com.fasterxml.jackson.annotation.JsonAutoDetect</span><span class="sy0">;</span><br /> <span class="kw1">import</span> <span class="co2">com.fasterxml.jackson.annotation.JsonInclude</span><span class="sy0">;</span><br /> <span class="kw1">import</span> <span class="co2">com.fasterxml.jackson.core.JsonProcessingException</span><span class="sy0">;</span><br /> <span class="kw1">import</span> <span class="co2">com.fasterxml.jackson.databind.ObjectMapper</span><span class="sy0">;</span><br /> <span class="kw1">import</span> <span class="co2">org.junit.Test</span><span class="sy0">;</span><br /> <br /> <span class="kw1">import</span> <span class="co2">java.io.Serializable</span><span class="sy0">;</span><br /> <span class="kw1">import</span> <span class="co2">java.util.HashMap</span><span class="sy0">;</span><br /> <br /> <span class="kw1">import</span> <span class="co2">static</span> com.<span class="me1">fasterxml</span>.<span class="me1">jackson</span>.<span class="me1">annotation</span>.<span class="me1">JsonAutoDetect</span>.<a href="http://www.google.com/search?hl=en&q=allinurl%3Avisibility+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Visibility</span></a>.<span class="me1">ANY</span><span class="sy0">;</span><br /> <span class="kw1">import</span> <span class="co2">static</span> com.<span class="me1">fasterxml</span>.<span class="me1">jackson</span>.<span class="me1">annotation</span>.<span class="me1">JsonAutoDetect</span>.<a href="http://www.google.com/search?hl=en&q=allinurl%3Avisibility+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Visibility</span></a>.<span class="me1">NONE</span><span class="sy0">;</span><br /> <br /> <span class="kw1">public</span> <span class="kw1">class</span> TestMemoryConsumption <span class="br0">&#123;</span><br /> &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw4">long</span> MEGABYTE <span class="sy0">=</span> 1024L <span class="sy0">*</span> 1024L<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw4">int</span> LOOP <span class="sy0">=</span> <span class="nu0">1000000</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">long</span> bytesToMegabytes<span class="br0">&#40;</span><span class="kw4">long</span> bytes<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> bytes <span class="sy0">/</span> MEGABYTE<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; @Test<br /> &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> testMemoryConsumption<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Aexception+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Exception</span></a> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; ObjectMapper objectMapper <span class="sy0">=</span> <span class="kw1">new</span> ObjectMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; HashMap<span class="sy0"><</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a>, Object<span class="sy0">></span> map <span class="sy0">=</span> <span class="kw1">new</span> HashMap<span class="sy0"><</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a>, Object<span class="sy0">></span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0"></span><span class="sy0">;</span> i <span class="sy0"><</span> LOOP<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreWithToJson storeWithToJson <span class="sy0">=</span> <span class="kw1">new</span> StoreWithToJson<span class="br0">&#40;</span><span class="st0">"name"</span>, <span class="st0">"description"</span>, objectMapper<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; map.<span class="me1">put</span><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a>.<span class="me1">valueOf</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span>, storeWithToJson<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; printMemoryConsumption<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; @Test<br /> &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> testMemoryConsumptionWithoutObjectMapper<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Aexception+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Exception</span></a> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; HashMap<span class="sy0"><</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a>, Object<span class="sy0">></span> map <span class="sy0">=</span> <span class="kw1">new</span> HashMap<span class="sy0"><</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a>, Object<span class="sy0">></span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0"></span><span class="sy0">;</span> i <span class="sy0"><</span> LOOP<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Store store <span class="sy0">=</span> <span class="kw1">new</span> Store<span class="br0">&#40;</span><span class="st0">"name"</span>, <span class="st0">"description"</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; map.<span class="me1">put</span><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a>.<span class="me1">valueOf</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span>, store<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; printMemoryConsumption<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">void</span> printMemoryConsumption<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Aruntime+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Runtime</span></a> runtime <span class="sy0">=</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Aruntime+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Runtime</span></a>.<span class="me1">getRuntime</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; runtime.<span class="me1">gc</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Asystem+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">runFinalization</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">long</span> memory <span class="sy0">=</span> runtime.<span class="me1">totalMemory</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">-</span> runtime.<span class="me1">freeMemory</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Asystem+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">"Used memory is bytes: "</span> <span class="sy0">+</span> memory<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Asystem+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">"Used memory is megabytes: "</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> bytesToMegabytes<span class="br0">&#40;</span>memory<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <span class="br0">&#125;</span><br /> <br /> @JsonInclude<span class="br0">&#40;</span>JsonInclude.<span class="me1">Include</span>.<span class="me1">NON_NULL</span><span class="br0">&#41;</span><br /> @JsonAutoDetect<span class="br0">&#40;</span>fieldVisibility <span class="sy0">=</span> JsonAutoDetect.<a href="http://www.google.com/search?hl=en&q=allinurl%3Avisibility+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Visibility</span></a>.<span class="me1">NONE</span>, getterVisibility <span class="sy0">=</span> ANY, setterVisibility <span class="sy0">=</span> NONE<span class="br0">&#41;</span><br /> <span class="kw1">class</span> StoreWithToJson <span class="kw1">implements</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Aserializable+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Serializable</span></a> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; <span class="kw1">private</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> name<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="kw1">private</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> description<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="kw1">private</span> ObjectMapper mapper<span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> StoreWithToJson<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> name, <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> description, ObjectMapper mapper<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> name<span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">description</span> <span class="sy0">=</span> description<span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">mapper</span> <span class="sy0">=</span> mapper<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> toJson<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> JsonProcessingException <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> mapper.<span class="me1">writeValueAsString</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> getName<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> name<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> getDescription<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> description<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <span class="br0">&#125;</span><br /> <br /> <br /> <span class="kw1">class</span> Store <span class="kw1">implements</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Aserializable+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Serializable</span></a> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; <span class="kw1">private</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> name<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="kw1">private</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> description<span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> Store<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> name, <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> description<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> name<span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">description</span> <span class="sy0">=</span> description<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> getName<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> name<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> getDescription<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> description<span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <span class="br0">&#125;</span>
        </div>
      </td>
    </tr>
  </table>
</div>


<p>Result from passing <strong>ObjectMapper</strong> from the constructor.</p>

<div class="codecolorer-container text blackboard" style="overflow:auto;white-space:nowrap;width:100%;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          Used memory is bytes: 3723968<br /> Used memory is megabytes: 3
        </div>
      </td>
    </tr>
  </table>
</div>


<p>Result from passing <strong>ObjectMapper</strong> just when I want to use it.</p>

<div class="codecolorer-container text blackboard" style="overflow:auto;white-space:nowrap;width:100%;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />
        </div>
      </td>
      
      <td>
        <div class="text codecolorer">
          Used memory is bytes: 1928536<br /> Used memory is megabytes: 1
        </div>
      </td>
    </tr>
  </table>
</div>


<p>I know this might be obvious for some people but if you have the same problems as myself this might help shed some lights to something else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs Cookies With Play Framework 2.1.1 Java Session.]]></title>
    <link href="http://noppanit.github.io/angularjs-cookies-with-play-framework-2-1-1-java-session/"/>
    <updated>2013-05-31T00:00:00-04:00</updated>
    <id>http://noppanit.github.io/angularjs-cookies-with-play-framework-2-1-1-java-session</id>
    <content type="html"><![CDATA[<p>I have been working with AngularJs and I loved it, but occasionally I ran into some problems and the documentation is not that reliable. So, I&#8217;m helping them to increase the rank.</p>

<p>Recently, I have this problem when Play saved some session in cookie already, but I can&#8217;t use $cookies from AngularJs to read the cookie. So, I started digging in and I found that those cookies are set with <strong>httpOnly</strong> by default. If you have that flag on any plugins (e.g, AngularJs) cannot read that cookie. So, it Play 1 you can set <strong>application.session.httpOnly=false</strong> but in Play 2.1 they changed to <strong>session.httpOnly=false</strong></p>

<p>I&#8217;m hoping I can save some people&#8217;s time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Ebean Entities in Main Class for Play Framework Java]]></title>
    <link href="http://noppanit.github.io/run-ebean-entities-in-main-class-for-play-framework-java/"/>
    <updated>2013-05-22T00:00:00-04:00</updated>
    <id>http://noppanit.github.io/run-ebean-entities-in-main-class-for-play-framework-java</id>
    <content type="html"><![CDATA[<p>I guess the title of this blog is kinda wired and I don&#8217;t know how to make it better. People might be wondering why would you want to do that. So, on the current project we have a little requirement to seed the data for the designers to mock the data into the database but they don&#8217;t want to open IDE and run a program. And we would like to use EBean Entities because that should be the models of the application. Let&#8217;s look at the code.</p>

<div class="codecolorer-container java blackboard" style="overflow:auto;white-space:nowrap;width:100%;height:400px;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />
        </div>
      </td>
      
      <td>
        <div class="java codecolorer">
          <span class="kw1">public</span> <span class="kw1">class</span> Seeder <span class="br0">&#123;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> args<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Asqlexception+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">SQLException</span></a> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; EbeanServer server <span class="sy0">=</span> setupEBeanServer<span class="br0">&#40;</span>args<span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; cleanData<span class="br0">&#40;</span>server<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0"></span><span class="sy0">;</span> i <span class="sy0"><</span> <span class="nu0">10</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setupData<span class="br0">&#40;</span>server<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> EbeanServer setupEBeanServer<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> username <span class="sy0">=</span> args<span class="br0">&#91;</span><span class="nu0"></span><span class="br0">&#93;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> password <span class="sy0">=</span> args<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> connectionString <span class="sy0">=</span> args<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> dbDriver <span class="sy0">=</span> args<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// You can use ebean.properties instead of programatically configure it. &nbsp;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; DataSourceConfig toadlaneDB <span class="sy0">=</span> <span class="kw1">new</span> DataSourceConfig<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; ServerConfig config <span class="sy0">=</span> <span class="kw1">new</span> ServerConfig<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; config.<span class="me1">setName</span><span class="br0">&#40;</span><span class="st0">"mysql"</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; toadlaneDB.<span class="me1">setDriver</span><span class="br0">&#40;</span>dbDriver<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; toadlaneDB.<span class="me1">setUsername</span><span class="br0">&#40;</span>username<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; toadlaneDB.<span class="me1">setPassword</span><span class="br0">&#40;</span>password<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; toadlaneDB.<span class="me1">setUrl</span><span class="br0">&#40;</span>connectionString<span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; config.<span class="me1">setDataSourceConfig</span><span class="br0">&#40;</span>toadlaneDB<span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; config.<span class="me1">setDefaultServer</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; config.<span class="me1">setRegister</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> EbeanServerFactory.<span class="me1">create</span><span class="br0">&#40;</span>config<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw4">void</span> cleanData<span class="br0">&#40;</span>EbeanServer connection<span class="br0">&#41;</span> <span class="kw1">throws</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Asqlexception+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">SQLException</span></a> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; connection.<span class="me1">createSqlUpdate</span><span class="br0">&#40;</span><span class="st0">"DELETE FROM PRODUCTS"</span><span class="br0">&#41;</span>.<span class="me1">execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <br /> &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw4">void</span> setupData<span class="br0">&#40;</span>EbeanServer server<span class="br0">&#41;</span> <span class="br0">&#123;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; Product product <span class="sy0">=</span> <span class="kw1">new</span> Product<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// setup properties</span><br /> &nbsp; &nbsp; &nbsp; &nbsp; server.<span class="me1">save</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="sy0">;</span><br /> &nbsp; <br /> &nbsp; &nbsp; <span class="br0">&#125;</span><br /> <span class="br0">&#125;</span><br /> <br /> @<a href="http://www.google.com/search?hl=en&q=allinurl%3Aentity+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Entity</span></a><br /> <span class="kw1">public</span> <span class="kw1">class</span> Product <span class="kw1">extends</span> Model <span class="br0">&#123;</span><br /> &nbsp; &nbsp; <span class="co1">// Properties</span><br /> <span class="br0">&#125;</span>
        </div>
      </td>
    </tr>
  </table>
</div>


<p>People might be wondering it should be difficult because Play comes with EBean already but when you run this class from the main class you are outside of Play world and it becomes a little problem. First, EBean will complain about</p>

<div class="codecolorer-container java blackboard" style="overflow:auto;white-space:nowrap;width:100%;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />3<br />4<br />
        </div>
      </td>
      
      <td>
        <div class="java codecolorer">
          @<a href="http://www.google.com/search?hl=en&q=allinurl%3Aentity+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Entity</span></a><br /> <span class="kw1">public</span> <span class="kw1">class</span> Product <span class="kw1">extends</span> Model <span class="br0">&#123;</span><br /> &nbsp; &nbsp; <span class="co1">// Properties</span><br /> <span class="br0">&#125;</span>
        </div>
      </td>
    </tr>
  </table>
</div>


<p>Because Product has been marked @Entity already but we also extends that with Model for other magic methods again. Here&#8217;s the trick which I use -javaagent:/${PROJECT_HOME}/lib/ebean-2.7.7-agent.jar</p>

<p>Here&#8217;s what I have done in Ant script</p>

<div class="codecolorer-container xml blackboard" style="overflow:auto;white-space:nowrap;width:100%;">
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td class="line-numbers">
        <div>
          1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />
        </div>
      </td>
      
      <td>
        <div class="xml codecolorer">
          &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><java</span> <span class="re0">classname</span>=<span class="st0">"seeder.Seeder"</span> <span class="re0">dir</span>=<span class="st0">"${play.test.build.dir}"</span> <span class="re0">fork</span>=<span class="st0">"true"</span></span><br /> <span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">failonerror</span>=<span class="st0">"true"</span><span class="re2">></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><arg</span> <span class="re0">value</span>=<span class="st0">"${username}"</span><span class="re2">/></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><arg</span> <span class="re0">value</span>=<span class="st0">"${password}"</span><span class="re2">/></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><arg</span> <span class="re0">value</span>=<span class="st0">"${db.url}"</span><span class="re2">/></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><arg</span> <span class="re0">value</span>=<span class="st0">"${db.driver}"</span><span class="re2">/></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><jvmarg</span> <span class="re0">value</span>=<span class="st0">"-javaagent:/${PROJECT_HOME}/lib/ebean-2.7.7-agent.jar"</span> <span class="re2">/></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><classpath<span class="re2">></span></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"><path</span> <span class="re0">refid</span>=<span class="st0">"seeder-classpath"</span><span class="re2">/></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"></classpath<span class="re2">></span></span></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1"></java<span class="re2">></span></span></span>
        </div>
      </td>
    </tr>
  </table>
</div>


<p>I was inspired by this <a href="http://blog.matthieuguillermin.fr/2012/03/unit-testing-tricks-for-play-2-0-and-ebean/">guy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Command Line Program]]></title>
    <link href="http://noppanit.github.io/test-command-line-program/"/>
    <updated>2011-04-26T00:00:00-04:00</updated>
    <id>http://noppanit.github.io/test-command-line-program</id>
    <content type="html"><![CDATA[<p>When I was in TWU I was assigned to implement a simple program in Java Command line. I was ok but when I came to TDD approach I really didn&#8217;t know what to do and test command-line in JUnit. I googled but I found nothing. However, after <a href="http://www.markhneedham.com/">Mark Needham</a> shows us in code and it was rather easy to do that. So I think I would write the example so that I could remember.</p>

<p>If you have a program like this. How would you test it in JUnit?</p>

<pre><code class="java">public void launchApp() throws IOException {
    InputStreamReader inputStream = new InputStreamReader(System.in);
    BufferedReader reader = new BufferedReader(inputStream);
    String value = reader.readLine();
    int choice = Integer.parseInt(value);
    switch( choice )
    {
        case 0:
            System.out.println("Print 0");
            break;
        case 1:
            System.out.println("Print 1");
            break;
        case 2:
            int anotherChoice = Integer.parseInt(reader.readLine());
            if( anotherChoice == 0 )
            {
                System.out.println("Print Toy");
            }
            else
            {
                System.out.println("Print Something Else");
            }
            break;
    }
}
</code></pre>

<p>What he pointed out to test this kind of program is to implement a queue in InputStreamReader.</p>

<p>This is the example</p>

<pre><code class="java">class StubbedInputStream extends InputStream {
    private Queue&lt;String&gt; input;

    public StubbedInputStream(Queue&lt;String&gt; input) {
        this.input = input;
    }

    @Override
        public int read(byte[] bytes) throws IOException {
            return super.read(bytes);    //To change body of overridden methods use File | Settings | File Templates.
        }

    @Override
        public int read(byte[] bytes, int i, int i1) throws IOException {
            if(input.isEmpty()) {
                return -1;
            }

            int byteLocation = 0;
            for(byte b : input.remove().getBytes()) {
                bytes[byteLocation] = b;
                byteLocation++;
            }
            bytes[byteLocation] = "\n".getBytes()[0];
            return byteLocation + 1;
        }

    @Override
        public int read() throws IOException {
            return 0;
        }

    public static InputStreamBuilder stubInputStream() {
        return new InputStreamBuilder();
    }
}
</code></pre>

<p>And &#8230;</p>

<pre><code class="java">public class InputStreamBuilder {
    private Queue&lt;String&gt; values = new LinkedList&lt;String&gt;();

    public InputStreamBuilder toReturn(String value) {
        this.values.add(value);
        return this;
    }

    public InputStreamBuilder then(String value) {
        this.values.add(value);
        return this;
    }

    public StubbedInputStream atSomePoint() {
        return new StubbedInputStream(values);
    }
}
</code></pre>

<p>When you want to test the command-line program you can do something like this.</p>

<pre><code class="java">public class MainTest {

    private PrintStream console;
    private ByteArrayOutputStream outputStream;

    @Before
    public void before() {
        console = System.out;
        outputStream = new ByteArrayOutputStream();
    }

    @Test
    public void mainTest() throws IOException {
        System.setOut(new PrintStream(outputStream));
        System.setIn(stubInputStream().toReturn("0").atSomePoint());

        new Main().launchApp();

        assertThat(outputStream.toString(), containsString("Print 0"));
    }

    @Test
    public void mainTestNextCase() throws IOException {
        System.setOut(new PrintStream(outputStream));
        System.setIn(stubInputStream().toReturn("2").then("0").atSomePoint());

        new Main().launchApp();

        assertThat(outputStream.toString(), containsString("Print Toy"));
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>

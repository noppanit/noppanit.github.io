<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | My Blog]]></title>
  <link href="https://www.noppanit.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://www.noppanit.com/"/>
  <updated>2017-02-25T22:44:36-05:00</updated>
  <id>https://www.noppanit.com/</id>
  <author>
    <name><![CDATA[Noppanit Charassinvichai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is going on under your JavaScript code]]></title>
    <link href="https://www.noppanit.com/what-is-going-on-under-your-javascript-code/"/>
    <updated>2016-10-04T01:41:25-04:00</updated>
    <id>https://www.noppanit.com/what-is-going-on-under-your-javascript-code</id>
    <content type="html"><![CDATA[<p><strong>Disclaimer</strong></p>

<p>I’m no expert in this field nor having a PhD in Compiler. This is just my pure curiosity and I hope to share of what I’ve discovered so people can continue their curiosity.</p>

<h2 id="why-im-interested-in-this">Why I’m interested in this.</h2>
<p>I was asked once during my technical interview, “What happen when you execute fs.readFileSync(‘’)”. What he meant was that how JavaScript code interacts with the machine under the hood. At the time, I thought I just wrote that code and there you go I got the content of the file.</p>

<p>I couldn’t answer and I didn’t get the job. I just recently became a JavaScript developer because of my interest in front-end and back-end in the same time. Knowing JavaScript allows me to get the best of both worlds. However, the only thing I know about JavaScript is that it’s something to do with V8 and I had no idea what’s going on under the hood. So, I took the time to really understand how JavaScript works and the history behind it. So, I started with the task a computer does best; executing commands or how does a computer execute a command.</p>

<h2 id="how-does-computer-works">How does computer works?</h2>
<p>One of the best movies for me is “The Core” where “Rat” had to hack the Internet to control the flow of information. The hacker claims that he only knew one language, “zeros and ones”. At the time, I understood that it’s something to do with binary number, and I thought that it’s just hollywood talk and these people didn’t know what they were talking. I have to write <code>print('Hello');</code> to print <code>Hello</code> on my console, it has nothing to do with zeros or ones.</p>

<p>So, I started digging and I found <a href="https://m.reddit.com/r/learnprogramming/comments/1pv40y/for_those_of_you_wondering_how_code_becomes_ones/">this</a>.</p>

<p>Basically, when we execute a piece of code, the compiler compiles the code to a set of instructions which is Assembly. Then, we have an <a href="https://en.wikipedia.org/wiki/Assembly_language#Assembler">assembler</a> to translate the instructions to their numerical equivalents. For example,</p>

<p><code>bash
ADD esp, 8
</code></p>

<p>is translated in x86 architecture like this.</p>

<p>``` bash
Raw Hex (zero bytes in bold):</p>

<p>83C408</p>

<p>String Literal:</p>

<p>“\x83\xC4\x08”</p>

<p>Array Literal:</p>

<p>{ 0x83, 0xC4, 0x08 }</p>

<p>Disassembly:
0:  83 c4 08                add    esp,0x8</p>

<p>```</p>

<p>Notice the HEX code <code>83C408</code> which you can translate to binary number later for the computer to understand.</p>

<p>You can use this <a href="https://defuse.ca/online-x86-assembler.htm">online assembler</a> to play with it.</p>

<h2 id="how-does-javascript-engine-v8-work">How does JavaScript engine (v8) work?</h2>
<p>In a nutshell, V8 <a href="http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/">translates JavaScript</a>
code to machine code with <em>JIT (Just-In-Time) compiler</em>.</p>

<p>There are <a href="http://www.mattzeunert.com/2015/08/19/viewing-assembly-code-generated-by-v8.html">four main stages</a> of how the code passes through V8.</p>

<ol>
  <li>
    <p>JavaScript - Your code</p>
  </li>
  <li>
    <p>Hydrogen - Intermediate code</p>
  </li>
  <li>
    <p>Lithium - Machine specific code</p>
  </li>
  <li>
    <p>Machine Code - This is what your computer understand.</p>
  </li>
</ol>

<p>In this post we’re going to see the assembly code which is the machine specific code.</p>

<h2 id="show-me-the-code">Show me the code</h2>
<p>Enough talking. Now show me the code you say. Let’s say you have a simple function to add two numbers together like this.</p>

<p><code>javascript
function add(a, b) {
  return a + b;
}
</code></p>

<p>To view the machine code in Assembly you need to install V8. First you need to install <a href="https://www.chromium.org/developers/how-tos/install-depot-tools">depot-tools</a>. Once you install <code>depot-tools</code> you can run
Follow this <a href="https://github.com/v8/v8/wiki/Using%20Git">instruction</a>.</p>

<p><em>Note</em>: The documentation of how to install V8 is subject to change. So, please refer to <a href="https://github.com/v8/v8/wiki/Building%20with%20GN">link</a>.</p>

<p>In order to get <code>V8</code> you need to run. You will also need <code>Python 2</code></p>

<p><code>bash
fetch v8
cd v8
</code></p>

<p>The script will take sometime to finish. It will fetch V8 source code. Then you need to build all the dependencies by running.</p>

<p><code>bash
gclient sync
</code></p>

<p>Now you need to install D8. The next step is going to take a long time. So, get yourself a nice cup of coffee.</p>

<p><code>bash
make x64.release objectprint=on disassembler=on
</code></p>

<p>Once everything is in place, you’re ready to see how your code is communicating with your CPU.</p>

<p>You can do this to get the assembly code</p>

<p><code>bash
cd out/x64.release
./d8 --print-code ~/Downloads/add.js
</code></p>

<p>This is what you’re likely going to see.</p>

<p>``` nasm
— Raw source —
function add(a,b) {
  return a+b;
}</p>

<p>— Code —
source_position = 0
kind = FUNCTION
compiler = full-codegen
Instructions (size = 140)
0x27f3928043e0     0  55             push rbp
0x27f3928043e1     1  4889e5         REX.W movq rbp,rsp
0x27f3928043e4     4  56             push rsi
0x27f3928043e5     5  57             push rdi
0x27f3928043e6     6  488b4f2f       REX.W movq rcx,[rdi+0x2f]
0x27f3928043ea    10  488b490f       REX.W movq rcx,[rcx+0xf]
0x27f3928043ee    14  83411b01       addl [rcx+0x1b],0x1
0x27f3928043f2    18  49ba81bb8a39e52a0000 REX.W movq r10,0x2ae5398abb81    ;; object: 0x2ae5398abb81 &lt;FixedArray[2]&gt;
0x27f3928043fc    28  4152           push r10
0x27f3928043fe    30  6a00           push 0x0
0x27f392804400    32  488b45f0       REX.W movq rax,[rbp-0x10]
0x27f392804404    36  488b402f       REX.W movq rax,[rax+0x2f]
0x27f392804408    40  488b400f       REX.W movq rax,[rax+0xf]
0x27f39280440c    44  50             push rax
0x27f39280440d    45  b803000000     movl rax,0x3
0x27f392804412    50  48bb80753e1001000000 REX.W movq rbx,0x1103e7580
0x27f39280441c    60  e81fffefff     call 0x27f392704340     ;; code: STUB, CEntryStub, minor: 8
0x27f392804421    65  493ba5200c0000 REX.W cmpq rsp,[r13+0xc20]
0x27f392804428    72  7305           jnc 79  (0x27f39280442f)
0x27f39280442a    74  e811e6f4ff     call StackCheck  (0x27f392752a40)    ;; code: BUILTIN
0x27f39280442f    79  498b45a0       REX.W movq rax,[r13-0x60]
0x27f392804433    83  48bba9ba8a39e52a0000 REX.W movq rbx,0x2ae5398abaa9    ;; object: 0x2ae5398abaa9 Cell for 6144
0x27f39280443d    93  83430bd1       addl [rbx+0xb],0xd1
0x27f392804441    97  791f           jns 130  (0x27f392804462)
0x27f392804443    99  50             push rax
0x27f392804444   100  e877e5f4ff     call InterruptCheck  (0x27f3927529c0)    ;; code: BUILTIN
0x27f392804449   105  58             pop rax
0x27f39280444a   106  48bba9ba8a39e52a0000 REX.W movq rbx,0x2ae5398abaa9    ;; object: 0x2ae5398abaa9 Cell for 6144
0x27f392804454   116  49ba0000000000180000 REX.W movq r10,0x180000000000
0x27f39280445e   126  4c895307       REX.W movq [rbx+0x7],r10
0x27f392804462   130  c9             leavel
0x27f392804463   131  c20800         ret 0x8
0x27f392804466   134  6690           nop</p>

<p>Source positions:
 pc offset  position
         0         0
       130        35  statement</p>

<p>Deoptimization Output Data (deopt points = 0)</p>

<p>Back edges (size = 0)
ast_id  pc_offset  loop_depth</p>

<p>0x2ae5398abbb9: [TypeFeedbackInfo]
 - ic_total_count: 0, ic_with_type_info_count: 0, ic_generic_count: 0</p>

<p>RelocInfo (size = 6)
0x27f3928043f4  embedded object  (0x2ae5398abb81 &lt;FixedArray[2]&gt;)
0x27f39280441d  code target (STUB)  (0x27f392704340)
0x27f39280442b  code target (BUILTIN)  (0x27f392752a40)
0x27f392804435  embedded object  (0x2ae5398abaa9 Cell for 6144)
0x27f392804445  code target (BUILTIN)  (0x27f3927529c0)
0x27f39280444c  embedded object  (0x2ae5398abaa9 Cell for 6144)</p>

<p>— End code —</p>

<p>```</p>

<p>~~Now, in theory you can grab the hex code and run that in C and you should be able to get the same result. I haven’t tried it please let me know if it works or not.~~ It wouldn’t work because the generated code has fixed memory address from when the program was executed.</p>

<p>What I learn from this post is how is my JavaScript code executed in my computer and the next time I got asked, I will be able to answer that interview question. Sometimes, it’s nicer to be asked a question like this than how to revert a binary tree on a whiteboard. Don’t you think?</p>

<p>More info</p>

<ol>
  <li>
    <p><a href="https://gist.github.com/kevincennis/0cd2138c78a07412ef21">V8 Cheatsheet</a></p>
  </li>
  <li>
    <p><a href="https://wingolog.org/archives/2011/06/08/what-does-v8-do-with-that-loop">What does V8 do with that loop</a></p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=yOyaJXpAYZQ">Comparing C to machine language (video)</a></p>
  </li>
  <li>
    <p><a href="https://wingolog.org/archives/2011/08/02/a-closer-look-at-crankshaft-v8s-optimizing-compiler">A closer look at crankshaft v8s optimizing compiler</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example: How did I convert async code to sync code with Promise.]]></title>
    <link href="https://www.noppanit.com/example-how-did-i-convert-async-code-to-sync-code-with-promise/"/>
    <updated>2015-05-24T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/example-how-did-i-convert-async-code-to-sync-code-with-promise</id>
    <content type="html"><![CDATA[<p>I’ve just finished my first refactor to convert my node.js code to be more promisey (I believe that’s the word they use these days). There’s lots of documents out there to do this. However, I thought I should contribute more to help me understand more and might get some feedback from people who’s seen it as well.</p>

<p>I’m trying to create a bot to report me back the performance of my site in desktop and mobile mode. So, I thought it would be easy since Google has an <a href="https://developers.google.com/speed/docs/insights/v2/getting-started">API</a> for that already so I went ahead and did this.</p>

<p>``` javascript</p>

<p>var request = require(‘request’);
var urlToGetTheScore = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;strategy=desktop&amp;fields=ruleGroups’</p>

<p>request.get(urlToGetTheScore, function (error, response, body) {
  if(error) console.log(error);</p>

<p>console.log(JSON.parse(body).ruleGroups.SPEED.score);
});</p>

<p>```</p>

<p>It’s pretty easy and straight forward right but now that would only return the score of desktop. I need the score of my mobile site as well. So, I added more code to be like this.</p>

<p>``` javascript</p>

<p>var request = require(‘request’);</p>

<p>var urlToGetTheScoreDesktop = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;strategy=desktop&amp;fields=ruleGroups’</p>

<p>var urlToGetTheScoreMobile = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;strategy=mobile&amp;fields=ruleGroups’</p>

<p>request.get(urlToGetTheScoreDesktop, function (error, response, body) {
  if(error) console.log(error);</p>

<p>console.log(JSON.parse(body).ruleGroups.SPEED.score);
});</p>

<p>request.get(urlToGetTheScoreMobile, function (error, response, body) {
  if(error) console.log(error);</p>

<p>console.log(JSON.parse(body).ruleGroups.SPEED.score);
});</p>

<p>```</p>

<p>That’s great but I want to return both scores to a client so I can report the scores rather than printing them to the console. Since, <strong>request</strong> is asynchronous you cannot guarantee which score would come first. So, I thought it’s easy. I just need to call one request after the other. So, I came up with this.</p>

<p>``` javascript</p>

<p>var request = require(‘request’);</p>

<p>var urlToGetTheScoreDesktop = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;strategy=desktop&amp;fields=ruleGroups’</p>

<p>var urlToGetTheScoreMobile = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;strategy=mobile&amp;fields=ruleGroups’</p>

<p>request.get(urlToGetTheScoreDesktop, function (error, response, body) {
  if(error) reject(error);</p>

<p>var desktopScore = JSON.parse(body).ruleGroups.SPEED.score;</p>

<p>request.get(urlToGetTheScoreMobile, function (error, response, body) {
    if(error) reject(error);</p>

<pre><code>var mobileScore = JSON.parse(body).ruleGroups.SPEED.score;

console.log('desktop score is ' + desktopScore + ' and mobile score is ' + mobileScore);   }); });
</code></pre>

<p>```</p>

<p>Look at how ugly it is. Now I want to make it prettier. So, I will use Promise to make it look nicer. As a good engineer I need to create a test first.</p>

<p>``` javascript</p>

<p>var perfModule = require(‘./pagespeed’),
sinon = require(‘sinon’),
request = require(‘request’),
expect = require(‘expect.js’);</p>

<p>describe(‘Performance’, function() {
var server;
  beforeEach(function(done) {
    sinon.stub(request, ‘get’).yields(null, null, JSON.stringify({ruleGroups : { SPEED: {score:10}} }));
    done();
  });</p>

<p>it(‘should send performance stats to chat room’, function(done) {
    perfModule.pagespeed(function(donotknow, msg) {
      done();
      expect(msg).to.eql(‘desktop speed is 10 and mobile speed is 10’);
    });
  });
});</p>

<p>```</p>

<p>I’m using <a href="http://sinonjs.org/">Sinon.js</a> as the mocking framework and <a href="http://mochajs.org/">Mocha</a> as the testing framework which are pretty standard.</p>

<p>Now I can start refactor my code. At first, I wrote some code like this, just to make it work.</p>

<p>``` javascript</p>

<p>var request = require(‘request’);</p>

<p>var getSpeed = function(strategy) {
  var url = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http://www.noppanit.com&amp;strategy=’+ strategy + ‘&amp;fields=ruleGroups’
  return new Promise(function(resolve, reject) {
    request.get(url, function (error, response, body) {
      if(error) reject(error);</p>

<pre><code>  console.log(body);
  resolve(JSON.parse(body).ruleGroups.SPEED.score);
});   }); };
</code></pre>

<p>var pagespeed = function(cb) {
  getSpeed(‘desktop’).then(function(desktopSpeed) {
    getSpeed(‘mobile’).then(function(mobileSpeed) {
      console.log(‘desktop speed is ‘ + desktopSpeed + ‘ and mobile speed is ‘ + mobileSpeed);
    });</p>

<p>});
};</p>

<p>exports.pagespeed = pagespeed;</p>

<p>```</p>

<p>Any good JavaScript developer would be like, WTH!. You still have callbacks. I thought Promise would solve that issue already! Now, I could use the power of <strong>Promise.all</strong> which takes array of promises and return array of results. My final code would look something like this.</p>

<p>``` javascript</p>

<p>var request = require(‘request’),
Promise = require(‘promise’);</p>

<p>var getSpeed = function(strategy) {
  var url = ‘https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=http%3A%2F%2Ffusion.net&amp;strategy=’+ strategy + ‘&amp;fields=ruleGroups’
  return new Promise(function(resolve, reject) {
    request.get(url, function (error, response, body) {
      if(error) reject(error);</p>

<pre><code>  console.log(body);
  resolve(JSON.parse(body).ruleGroups.SPEED.score);
});   }); };
</code></pre>

<p>var pagespeed = function(cb) {
  Promise.all([getSpeed(‘desktop’), getSpeed(‘mobile’)]).then(function(speed) {
    var desktop = speed[0];
    var mobile = speed<a href="https://developers.google.com/speed/docs/insights/v2/getting-started">1</a>;</p>

<pre><code>console.log(null, 'desktop speed is ' + desktop + ' and mobile speed is ' + mobile);   }).catch(function(error) {
console.log(error);   }); };
</code></pre>

<p>exports.pagespeed = pagespeed;</p>

<p>```</p>

<p>I’m not an expert in Promise and I welcome any feedback that would help improve my code.</p>

<p>Reference<br />
<a href="http://www.html5rocks.com/en/tutorials/es6/promises/">ES6 Promises</a><br />
<a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html">We have a problem with promises</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event delegation in JavaScript is fast but how fast?]]></title>
    <link href="https://www.noppanit.com/event-delegation-javascript-fast-fast/"/>
    <updated>2014-11-22T00:00:00-05:00</updated>
    <id>https://www.noppanit.com/event-delegation-javascript-fast-fast</id>
    <content type="html"><![CDATA[<p>People say always use event delegation for adding event because it’s faster. But how fast exactly? I really want to create a test case for this, but I couldn’t figure out how to run B[enchmark.js][1] in browser. So, I thought we could just use Chrome Developer Tool to achieve this.</p>

<h2 id="what-are-we-measuring">What are we measuring?</h2>

<p>As I said in the beginning, we want to know how fast event delegation is compared to direct binding that most people do. For example, I’ve always seen people do this</p>

<p><code>javascript
$('#ul li').on('click', function() {
  // doing something amazing.
});
</code></p>

<p>What is actually doing is, jQuery will add the event to each of the <strong>li</strong> in the DOM. If you have 3-4 lis, then I don’t think it’s going to make a big difference. However, if you have a thousand lis, you will see some difference. I’ll show you by using Chrome Developer Tool.</p>

<h2 id="what-do-we-need">What do we need?</h2>

<p>We need some basic HTML</p>

<p>It’s going to be something like this</p>

<p>``` html</p>
<ul id="parent">
  <li></li>
  // 999 more <li>

```

Then we will have JavaScript like this

``` html
<script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
<script>
    $('#parent li').on('click', function() {
        console.log('you clicked me!');
    });

</script>
```

If you open your html page on Chrome you should see something like this.  
{% img https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.06.19-PM.png %}

If you go down to where JavaScript is executed You will see it takes around **37ms** to execute the snippet.  

{% img https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.07.18-PM.png %}

Now change your snippet to be event delegation

``` html
<script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
<script>
    $('#parent').on('click', 'li', function() {
        console.log('you clicked me!');
    });

</script>
```

And refresh the page you should see something like this.  

{% img https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.12.02-PM.png %}

Now it will only take **2ms** to execute the snippet. It&#8217;s because the event is added to one element not 1000 of them. 

This is just an easy example that you can do it yourself to improve your performance.

 [1]: http://benchmarkjs.com/ "benchmark.js"
 [2]: https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.06.19-PM.png
 [3]: https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.07.18-PM.png
 [4]: https://www.noppanit.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-21-at-7.12.02-PM.png
</li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.js virtual elements are being stripped out from mobile.]]></title>
    <link href="https://www.noppanit.com/knockout-js-virtual-elements-stripped-mobile/"/>
    <updated>2014-10-07T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/knockout-js-virtual-elements-stripped-mobile</id>
    <content type="html"><![CDATA[<p>This rarely happens and you would be surprised what is the cause of this. Recently, I have just finished a mobile site using knockout.js. I have used a fair amount of Virtual Elements in Knockout.js. But weirdly enough one day my Manager came in and talk to my <a href="https://twitter.com/sragu" title="Srini">tech lead</a> (@sragu) that the site is not working. We quickly checked with our live site and everything was ok yet the site from his phone wasn’t working at all.</p>

<p>We spent quite a long time to find out the cause of this. We cleared the cache. We restarted the phone. Tried different browsers. Luckily, then we found out this <a href="http://stackoverflow.com/questions/4113268/how-to-stop-javascript-injection-from-vodafone-proxy">thread</a> from Stackoverflow.com.</p>

<p>The cause of this is that Vodafone corporate network stripped out HTML comments to save and optimise the bandwidth.</p>

<p>The solution is to set Cache-Control to no-transform and the problem solved. If you have the same problem as me then this is the solution.</p>

<p><code>
Cache-Control: no-transform
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contextual Preloading for Ajax request.]]></title>
    <link href="https://www.noppanit.com/contextual-preloading-ajax-request/"/>
    <updated>2014-05-10T00:00:00-04:00</updated>
    <id>https://www.noppanit.com/contextual-preloading-ajax-request</id>
    <content type="html"><![CDATA[<p>I have just heard this from my friend <a href="https://twitter.com/rajveerr" title="rajveerr twitter">@rajveerr</a> about pre-loading at the global level, this concept is not new but I have just learned it.. Usually and I think everyone has done it before. People would do something like this.</p>

<p><code>javascript
$('#link1').on('click', function (e) {
    // Do some funky spinning wheel
    $.ajax({
        url: '/echo/json',
        success : function (data) {
            // Cancel that funky spinning wheel
        }
    });
});
</code></p>

<p>And you have to do this for every single ajax request. So, here’s how you would do that in a contextual level.</p>

<iframe width="100%" height="300" src="//jsfiddle.net/noppanit/y63n5/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>The trick is that in each ajax request you need to add context option. I used zepto as an example but jquery should work the same. The reason is that is <strong>e.target</strong> behaves differently each browser. Also, usually Ajax request would be fired from <strong>#document</strong> level that means your <strong>e.target</strong> would be your &lt;/p&gt;</p>

<p><code>javascript
$('#link1').on('click', function (e) {
    $.ajax({
        url: '/echo/json',
        &lt;strong&gt;context: e.target&lt;/strong&gt;,
        success : function (data) {
            console.log(data);
        }
    });
});
</code></p>

<p>By doing this if you want your pre-loader you just need to add <strong>.ajaxContainer</strong> class to your container.</p>

]]></content>
  </entry>
  
</feed>
